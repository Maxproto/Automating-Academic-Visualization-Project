[
    {
        "figure_path": "neurips_figures/2307.04204/linear_depth2_width256_scale3.png",
        "caption": "$\\alpha=10$",
        "source": "neurips/2307.04204/3_GDalign.tex",
        "arxiv_id": "neurips/2307.04204",
        "llava_output": "This image is a scatter plot, showing the relationship between two variables. The x-axis represents the global minimum, and the y-axis represents the tanh(q). The scatter plot is filled with many small dots, indicating the distribution of the data points. The plot is labeled with the equation for",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = np.linspace(0, 1, 1000)\ny = np.exp(-x**2)\n\n# Create the plot\nplt.plot(x, y)\n\n# Set the axis labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Global Minima')\n\n# Set the figure size and resolution\nplt.figure(figsize=(8, 6), dpi=300)\n\n# Show the plot\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.04204/linear_depth2_width256_scale3_direct.png"
    },
    {
        "figure_path": "neurips_figures/2307.04204/depth3_width64_scale5.png",
        "caption": "$m=256$, $L=3$",
        "source": "neurips/2307.04204/3_GDalign.tex",
        "arxiv_id": "neurips/2307.04204",
        "llava_output": "The image is a scatter plot showing the relationship between two variables. The x-axis represents the global minimization, and the y-axis represents the tanh(q/p). The plot consists of multiple points scattered across the graph, indicating the relationship between the two variables.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\ndef create_plot(m, L):\n    x = np.linspace(0, 10, 1000)\n    y = np.exp(-x**2 / (2 * m))\n    y_tanh = np.tanh(x / (np.sqrt(2) * np.sqrt(m)))\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label='Global Minima')\n    ax.plot(x, y_tanh, label='Tanh')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title(f'm={m}, L={L}')\n    ax.legend()\n    return fig\nfig = create_plot(256, 3)\nfig.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.04204/depth3_width64_scale5_direct.png"
    },
    {
        "figure_path": "neurips_figures/2307.04204/single_depth3_width256_scale0.5.png",
        "caption": "$\\alpha=1.0$",
        "source": "neurips/2307.04204/A1_exp.tex",
        "arxiv_id": "neurips/2307.04204",
        "llava_output": "The image is a scatter plot showing the relationship between two variables.</s>",
        "is_data_visual": "Yes, the image is a data visualization plot, specifically a scatter plot showing the relationship between two variables, which is consistent with the justification provided. The figure caption provides additional context by indicating that $\\alpha=1.0$ is used to describe the relationship between the variables in the plot.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the x and y values\nx = np.linspace(0, 1, 100)\ny1 = np.exp(-x)\ny2 = np.exp(-2*x)\ny3 = np.exp(-3*x)\n\n# Plot the lines\nplt.plot(x, y1, label='y1')\nplt.plot(x, y2, label='y2')\nplt.plot(x, y3, label='y3')\n\n# Set the axis labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Alpha=1.0')\n\n# Show the plot\nplt.show()\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the x and y values\nx = np.linspace(0, 1, 100)\ny1 = np.exp(-x)\ny2 = np.exp(-2*x)\ny3 = np.exp(-3*x)\n\n# Plot the lines\nplt.plot(x, y1, label='y1')\nplt.plot(x, y2, label='y2')\nplt.plot(x, y3, label='y3')\n\n# Set the axis labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Alpha=1.0')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.04204/single_depth3_width256_scale0.5_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 2,
            "color_rating": 2,
            "line_styles_rating": 3,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2307.04204/single_depth3_width64.png",
        "caption": "$m=128$",
        "source": "neurips/2307.04204/A1_exp.tex",
        "arxiv_id": "neurips/2307.04204",
        "llava_output": "1. The image is a scatter plot showing the relationship between two variables.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate some data\nx = np.linspace(0, 10, 1000)\ny = np.sin(x)\n\n# Plot the data\nplt.plot(x, y)\n\n# Set the axis labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Data Visualization Figure')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.04204/single_depth3_width64_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 4,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2307.04204/single_depth10_width64.png",
        "caption": "$m=128$",
        "source": "neurips/2307.04204/A1_exp.tex",
        "arxiv_id": "neurips/2307.04204",
        "llava_output": "1. The image is a scatter plot.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the x and y values\nx = np.linspace(0, 10, 1000)\ny = np.exp(-x**2)\n\n# Plot the data\nplt.plot(x, y)\n\n# Set the title, x-axis label, and y-axis label\nplt.title(\"$m=128$\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig(\"plot.png\", dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.04204/single_depth10_width64_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 3,
            "plot_type_correct": "Yes",
            "text_elements_rating": 2,
            "color_rating": 2,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2307.04204/multiple_mean_size2.png",
        "caption": "$n=4$",
        "source": "neurips/2307.04204/A1_exp.tex",
        "arxiv_id": "neurips/2307.04204",
        "llava_output": "1. The image is a scatter plot.</s>",
        "is_data_visual": "Yes",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = np.linspace(0, 2, 100)\ny = np.exp(-x**2)\n\n# Plot the data points\nplt.scatter(x, y, s=10, c='black', label='Data points')\n\n# Calculate the mean and standard deviation\nmean = np.mean(y)\nstd = np.std(y)\n\n# Plot the mean and standard deviation\nplt.plot(x, mean + std, 'r-', label='Mean +- std')\nplt.plot(x, mean - std, 'b-', label='Mean - std')\n\n# Plot the regression line\nslope, intercept, r_value, p_value, std_err = np.polyfit(x, y, 2)\nplt.plot(x, slope*x + intercept, 'g-', label='Regression line')\n\n# Set the axis labels and title\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Data points, mean +- std, and regression line')\n\n# Add a legend\nplt.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2307.04204/multiple_mean_size2_direct.png"
    },
    {
        "figure_path": "neurips_figures/2307.04204/cifar_mean_width64.png",
        "caption": "$m=128$",
        "source": "neurips/2307.04204/A1_exp.tex",
        "arxiv_id": "neurips/2307.04204",
        "llava_output": "1. The image is a scatter plot, which is used to present the experiment results.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function\ndef tanh(x):\n    return np.tanh(x)\n\n# Define the range of x values\nx_values = np.linspace(-4, 4, 1000)\n\n# Calculate the tanh values for each x\ntanh_values = [tanh(x) for x in x_values]\n\n# Plot the tanh values\nplt.plot(x_values, tanh_values)\n\n# Add labels and title\nplt.xlabel('x')\nplt.ylabel('tanh(x)')\nplt.title('tanh(x)')\n\n# Save the plot as a png file with 300dpi\nplt.savefig('tanh_plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.04204/cifar_mean_width64_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 1,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2307.04204/cifar_mean_actelu_width64.png",
        "caption": "$m=128$",
        "source": "neurips/2307.04204/A1_exp.tex",
        "arxiv_id": "neurips/2307.04204",
        "llava_output": "1. The image is a scatter plot.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function\ndef tanh(x):\n    return np.tanh(x)\n\n# Define the x and y ranges\nx = np.linspace(-4, 4, 1000)\ny = tanh(x)\n\n# Create the plot\nplt.plot(x, y)\n\n# Set the title and axis labels\nplt.title('$m=128$')\nplt.xlabel('$x$')\nplt.ylabel('$y$')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('tanh_plot.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.04204/cifar_mean_actelu_width64_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2307.04204/cifar_mean_acttanh_width256_label0.png",
        "caption": "$m=512$",
        "source": "neurips/2307.04204/A1_exp.tex",
        "arxiv_id": "neurips/2307.04204",
        "llava_output": "The image is a scatter plot, which is a type of plot used to display the relationship between two variables. In this case, the plot shows the relationship between two variables, with one variable represented by the x-axis and the other variable represented by the y-axis. The scatter plot consists of a series of",
        "is_data_visual": "Yes",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function\ndef tanh(x):\n    return np.tanh(x)\n\n# Define the x and y arrays\nx = np.linspace(-5, 5, 1000)\ny = tanh(x)\n\n# Create the plot\nplt.plot(x, y)\n\n# Set the title and axis labels\nplt.title(\"tanh(x)\")\nplt.xlabel(\"x\")\nplt.ylabel(\"tanh(x)\")\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig(\"tanh.png\", dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.04204/cifar_mean_acttanh_width256_label0_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 3,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2307.05916/window_analysis_all.png",
        "caption": "Inner-subject accuracy of sex classification.",
        "source": "neurips/2307.05916/NeurIPS_main.tex",
        "arxiv_id": "neurips/2307.05916",
        "llava_output": "3 Bar Charts.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Set the figure size and background color\nfig = plt.figure(figsize=(8, 6), facecolor='white')\n\n# Define the x-axis labels\nx_labels = ['0.0', '0.25', '0.5', '0.75', '1.0']\n\n# Define the y-axis label\ny_label = 'Inner-subject accuracy of sex classification'\n\n# Define the bar colors\ncolors = ['blue', 'blue', 'blue', 'blue', 'blue']\n\n# Define the bar heights\nheights = [0.25, 0.25, 0.5, 0.5, 0.75, 0.75]\n\n# Plot the bars\nplt.bar(x_labels, heights, color=colors, width=0.15, align='center')\n\n# Add the y-axis label\nplt.ylabel(y_label)\n\n# Set the title\nplt.title('Inner-subject accuracy of sex classification')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')\n\n# Show the plot\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2307.05916/window_analysis_all_direct.png"
    },
    {
        "figure_path": "neurips_figures/2307.05916/loss_curve_sex.png",
        "caption": "Validation AUROC per training epoch for sex classification",
        "source": "neurips/2307.05916/NeurIPS_main.tex",
        "arxiv_id": "neurips/2307.05916",
        "llava_output": "The image is a line chart that shows the validation AUROC per training epoch for sex classification. The chart has four different lines, each representing a different model. The line chart is displayed on a white background, making it easy to read and understand the results.</s>",
        "is_data_visual": "Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([0.0, 0.25, 0.5, 0.5, 0.75, 1.0])\ny = np.array([0.25, 0.35, 0.6, 0.6, 0.75, 0.85])\n\n# Plot the data\nplt.plot(x, y)\n\n# Set the axis labels and title\nplt.xlabel('Training epoch')\nplt.ylabel('AUROC')\nplt.title('Validation AUROC per training epoch for sex classification')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.05916/loss_curve_sex_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 3,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 4,
            "numerical_accuracy_rating": 2,
            "figure_adaptability_rating": 3
        }
    },
    {
        "figure_path": "neurips_figures/2307.07907/causal_graph.png",
        "caption": "Estimated Causal Graphs of four tasks in Carla.",
        "source": "neurips/2307.07907/camera_ready.tex",
        "arxiv_id": "neurips/2307.07907",
        "llava_output": "The image is a Bar Chart, showing the estimated causal graphs of four tasks in Carla.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data\ndata = np.array([\n    [0.14, 0.12, 0.32, 0.31, 0.48, 0.61, 0.79, 0.97],\n    [0.14, 0.12, 0.32, 0.31, 0.48, 0.61, 0.79, 0.97],\n    [0.14, 0.12, 0.32, 0.31, 0.48, 0.61, 0.79, 0.97],\n    [0.14, 0.12, 0.32, 0.31, 0.48, 0.61, 0.79, 0.97]\n])\n\n# Create the figure\nfig, ax = plt.subplots(figsize=(8, 8))\n\n# Plot the data\nfor i in range(4):\n    x = np.arange(0, 10, 0.1)\n    y = data[i, 0]\n    ax.plot(x, y, label=f\"Task {i+1}\")\n\n# Add labels and legend\nax.set_xlabel(\"Brightness\")\nax.set_ylabel(\"Crossing\")\nax.set_title(\"Estimated Causal Graphs of four tasks in Carla\")\nax.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig(\"causal_graphs.png\", dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2307.07907/causal_graph_direct.png"
    },
    {
        "figure_path": "neurips_figures/2307.07907/causal_mask_prob_LiftCausal_all.png",
        "caption": "Estimated Causal Graphs of the Lift task in Robosuite.",
        "source": "neurips/2307.07907/camera_ready.tex",
        "arxiv_id": "neurips/2307.07907",
        "llava_output": "1. The image is a scatter plot showing the estimated causal graphs of the Lift task in Robosuite.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = np.array([\n    [0.1, 0.11, 0.31, 0.22],\n    [0.22, 0.22, 0.39, 0.33],\n    [0.41, 0.24, 0.63, 0.37],\n    [0.53, 0.38, 0.72, 0.51],\n    [0.62, 0.48, 0.79, 0.62],\n    [0.7, 0.56, 0.89, 0.71],\n    [0.84, 0.64, 0.99, 0.78]\n])\n\n# Create the plot\nplt.figure(figsize=(8, 6), dpi=300)\nplt.imshow(data, cmap='gray')\nplt.title('Estimated Causal Graphs of the Lift task in Robosuite')\nplt.colorbar()\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.07907/causal_mask_prob_LiftCausal_all_direct.png"
    },
    {
        "figure_path": "neurips_figures/2307.07907/causal_mask_prob_StackCausal_all.png",
        "caption": "Estimated Causal Graphs of the Stack task in Robosuite.",
        "source": "neurips/2307.07907/camera_ready.tex",
        "arxiv_id": "neurips/2307.07907",
        "llava_output": "0</s>",
        "is_data_visual": "Yes. Based on the figure caption, the image represents a data visualization plot that presents experimental results of the Stack task in Robosuite.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\ndef generate_plot(x, y):\n    fig, ax = plt.subplots(figsize=(10, 10))\n    ax.scatter(x, y, s=100)\n    ax.set_xlabel('X-axis')\n    ax.set_ylabel('Y-axis')\n    ax.set_title('Estimated Causal Graphs of the Stack task in Robosuite')\n    ax.set_xscale('log')\n    ax.set_yscale('log')\n    ax.set_aspect('equal', adjustable='box')\n    plt.show()\nx = np.arange(0, 1000, 100)\ny = np.random.rand(len(x))\ngenerate_plot(x, y)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.07907/causal_mask_prob_StackCausal_all_direct.png"
    },
    {
        "figure_path": "neurips_figures/2307.07907/causal_mask_prob_DoorCausal_all.png",
        "caption": "Estimated Causal Graphs of the Door task in Robosuite.",
        "source": "neurips/2307.07907/camera_ready.tex",
        "arxiv_id": "neurips/2307.07907",
        "llava_output": "0</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate the data for the plot\nx = np.arange(0, 5, 0.01)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create the figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))\n\n# Plot the first function on the first subplot\nax1.plot(x, y1, label='sin(x)')\nax1.set_xlabel('x')\nax1.set_ylabel('y1')\nax1.legend()\n\n# Plot the second function on the second subplot\nax2.plot(x, y2, label='cos(x)')\nax2.set_xlabel('x')\nax2.set_ylabel('y2')\nax2.legend()\n\n# Add a third line to the second subplot for the third function\nax2.plot(x, y3, linestyle='--', label='tan(x)')\nax2.legend(loc='best')\n\n# Set the axis limits and title\nax1.set_xlim([0, 5])\nax1.set_ylim([-1, 1])\nax2.set_xlim([0, 5])\nax2.set_ylim([-1, 1])\nfig.suptitle('Estimated Causal Graphs of the Door task in Robosuite')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('causal_graphs.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.07907/causal_mask_prob_DoorCausal_all_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2307.07907/causal_mask_prob_WipeCausal_all.png",
        "caption": "Estimated Causal Graphs of the Wipe task in Robosuite.",
        "source": "neurips/2307.07907/camera_ready.tex",
        "arxiv_id": "neurips/2307.07907",
        "llava_output": "0</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\ndata = np.array([\n    [0.0, 0.0, 0.0, 0.99],\n    [0.0, 0.1, 0.0, 0.99],\n    [0.0, 0.2, 0.0, 0.99],\n    [0.0, 0.3, 0.0, 0.99],\n    [0.0, 0.4, 0.0, 0.99],\n    [0.0, 0.5, 0.0, 0.99],\n    [0.0, 0.6, 0.0, 0.99],\n    [0.0, 0.7, 0.0, 0.99],\n    [0.0, 0.8, 0.0, 0.99],\n    [0.0, 0.9, 0.0, 0.99],\n    [0.0, 0.99, 0.0, 0.99]\n])\nplt.figure(figsize=(10, 10), dpi=300)\nplt.imshow(data, cmap='gray')\nplt.axis('off')\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.07907/causal_mask_prob_WipeCausal_all_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2307.08863/ipd_ablation_8.png",
        "caption": "Ablation experiment on the Iterated Prisoner's Dilemma. We show the effect of disabling exploration, using only $k$-step TD errors, using only one-step TD errors, disabling distributional RL, disabling target networks, using the $V$ formulation over the $U$ formulation, and training with a fixed $\\gamma=0.95$. For each configuration (row) we train 5 models for 500 outer loops. In the leftmost column, we show short-term TD error (over $k=10$ steps, as in training) and long-term TD error (over 100 steps, as a validation); the difference between these is due to bootstrapping. The horizontal axis measures number of outer loops performed. In the middle column, the returns $f(x)$ of agents that are being trained on the model (with $\\gamma=0.95$) and are reset every 10 outer loops. For those agents we continually test their exploitability; the third column shows their returns against agents trained to exploit them.",
        "source": "neurips/2307.08863/main.tex",
        "arxiv_id": "neurips/2307.08863",
        "llava_output": "The image is a Bar Chart that presents the results of an experiment on the Iterated Prisoner's Dilemma. The chart shows the effect of disabling exploration, using different types of TD errors, disabling distributional RL, and using different formulations. The chart is divided into",
        "is_data_visual": "Yes.",
        "llava_code": "pip install matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nrows = 7\ncolumns = 8\nouter_loops = np.arange(1, 501)\nx_min = 0\nx_max = 500\ny_min = 0\ny_max = 1",
        "runnable": false,
        "output_figure_path": "llava/neurips/2307.08863/ipd_ablation_8_direct.png"
    },
    {
        "figure_path": "neurips_figures/2307.10524/beta.png",
        "caption": "Average awards with varying choices of the hyper-parameter $\\beta$ in the robustness budget of \\ouralg. Shadow area depicts the range of standard deviations for $5$ random tests. Left: $\\beta=1, 10,10^2,10^3$, and $\\infty$ (directly applying the MPC baseline); Right: $\\beta=0, 0.05, 0.5, 1$, and $\\infty$.",
        "source": "neurips/2307.10524/main.tex",
        "arxiv_id": "neurips/2307.10524",
        "llava_output": "The image is a line chart that shows the average awards with varying choices of the hyper-parameter $\\beta$ in the robustness budget of \\ouralg. The chart has a shadow area that depicts the range of standard deviations for $5$ random tests.</s>",
        "is_data_visual": "Yes. The image is a line chart that presents experimental results, showing the average awards with varying choices of the hyperparameter $\\beta$ in the robustness budget of \\ouralg. The shadow area depicts the range of standard deviations for $5$ random tests, which is a useful aspect of the visualization.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = np.arange(0, 1001, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Set up the plot\nfig, ax = plt.subplots()\ncolor = 'tab:red'\n\n# Plot the lines\nax.plot(x, y1, color=color, linewidth=2)\nax.plot(x, y2, color=color, linewidth=2)\nax.plot(x, y3, color=color, linewidth=2)\n\n# Set the axis labels and title\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title('Average awards with varying choices of the hyper-parameter $\\beta$ in the robustness budget of \\ouralg.')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')",
        "runnable": false,
        "output_figure_path": "llava/neurips/2307.10524/beta_direct.png"
    },
    {
        "figure_path": "neurips_figures/2307.10810/2.png",
        "caption": "Experimental results",
        "source": "neurips/2307.10810/main.tex",
        "arxiv_id": "neurips/2307.10810",
        "llava_output": "The image is a scatter plot showing the relationship between two variables.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 1000, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Set the plot parameters\nfig, ax = plt.subplots()\nax.set_xlabel('Episode')\nax.set_ylabel('Reward')\nax.set_title('Experimental results')\n\n# Plot the data\nax.plot(x, y1, label='Sin')\nax.plot(x, y2, label='Cos')\nax.plot(x, y3, label='Tan')\n\n# Add the legend and grid\nax.legend()\nax.grid(True)\n\n# Save the plot as a PNG file with 300 dpi resolution\nplt.savefig('experimental_results.png', dpi=300)\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.10810/2_direct.png",
        "eval": {
            "axes_grids_rating": 4,
            "tick_marks_rating": 3,
            "plot_type_correct": "Yes",
            "text_elements_rating": 2,
            "color_rating": 3,
            "line_styles_rating": 3,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 3
        }
    },
    {
        "figure_path": "neurips_figures/2307.13855/rohrer100k_pvals1.png",
        "caption": "Learned values of $p$ in first SCS layer for Rohrer100K on CIFAR-10 ($32 \\times 32$, Initial Testing).",
        "source": "neurips/2307.13855/main.tex",
        "arxiv_id": "neurips/2307.13855",
        "llava_output": "The image is a line chart showing the learned values of $p$ in the first SCS layer for Rohrer100K on CIFAR-10 ($32 \\times 32$, Initial Testing).</s>",
        "is_data_visual": "Yes, the given image is a line chart presenting experimental results and represents a data visualization plot.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the x and y values\nx = np.arange(0, 100, 0.1)\ny = np.zeros(len(x))\n\n# Define the colors for the lines\ncolors = ['r', 'b', 'g', 'y', 'm', 'c', 'k', 'orange', 'purple', 'pink', 'gray']\n\n# Plot the lines\nfor i, color in enumerate(colors):\n    y[i*len(x):(i+1)*len(x)] = x[i*len(x):(i+1)*len(x)]\n    plt.plot(x, y, color=color, linewidth=0.5)\n\n# Set the axis labels and title\nplt.xlabel('p')\nplt.ylabel('Learned values in first SCS layer')\nplt.title('Learned values of $p$ in first SCS layer for Rohrer100K on CIFAR-10 ($32 \\times 32$, Initial Testing)')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('learned_values_plot.png', dpi=300, bbox_inches='tight')\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2307.13855/rohrer100k_pvals1_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 4,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2308.04024/Pong.png",
        "caption": "RL Loss Comparison Training Curves",
        "source": "neurips/2308.04024/main.tex",
        "arxiv_id": "neurips/2308.04024",
        "llava_output": "The image is a line chart showing the training loss of two different algorithms.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the x-axis range\nx_values = np.arange(0, 15, 0.5)\n\n# Define the y-axis range\ny_values = np.arange(0, 20, 2)\n\n# Create the figure\nfig, ax = plt.subplots(1, 1, figsize=(12, 6))\n\n# Plot the training curves\nax.plot(x_values, y_values, color='blue', label='Blue curve')\nax.plot(x_values, y_values+6, color='red', label='Red curve')\nax.legend(loc='upper right')\n\n# Set the x and y axis labels\nax.set_xlabel('Iteration')\nax.set_ylabel('Loss')\n\n# Set the title of the figure\nax.set_title('RL Loss Comparison Training Curves')\n\n# Save the figure as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')",
        "runnable": false,
        "output_figure_path": "llava/neurips/2308.04024/Pong_direct.png"
    },
    {
        "figure_path": "neurips_figures/2308.08778/color_noises_1.png",
        "caption": "Test color noise $e = 0.1$",
        "source": "neurips/2308.08778/appendix.tex",
        "arxiv_id": "neurips/2308.08778",
        "llava_output": "The image is a line chart that shows the results of an experiment.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data\ndata = np.array([0.0, 0.2, 0.2, 0.4, 0.6, 0.8, 1.0])\n\n# Define the colors for the lines\ncolors = ['red', 'green', 'purple', 'blue', 'orange', 'pink', 'gray']\n\n# Plot the data\nplt.plot(data, color=colors)\n\n# Set the title and axis labels\nplt.title('Test color noise $e = 0.1$')\nplt.xlabel('Train color noise')\nplt.ylabel('Accuracy')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('test_color_noise.png', dpi=300, bbox_inches='tight')\n\n# Show the plot\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2308.08778/color_noises_1_direct.png"
    },
    {
        "figure_path": "neurips_figures/2308.08778/joint.png",
        "caption": "",
        "source": "neurips/2308.08778/experiments.tex",
        "arxiv_id": "neurips/2308.08778",
        "llava_output": "This image is a line chart showing the results of an experiment. The chart has two lines, one in orange and one in green, indicating the accuracy of the two different methods. The orange line represents the accuracy of the EMDN method, while the green line represents the accuracy of the RMSE method.",
        "is_data_visual": "Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([0, 1, 2, 3, 4, 5])\ny1 = np.array([0.1, 0.3, 0.5, 0.6, 0.7, 0.8])\ny2 = np.array([0.1, 0.3, 0.5, 0.6, 0.7, 0.8])\ny3 = np.array([0.1, 0.3, 0.5, 0.6, 0.7, 0.8])\n\n# Create the plot\nfig, ax = plt.subplots()\nax.plot(x, y1, label='EDNIL')\nax.plot(x, y2, label='EDNIL (oracle)')\nax.plot(x, y3, label='Joint Iteration')\n\n# Add the legend and axis labels\nax.legend()\nax.set_xlabel('Iteration')\nax.set_ylabel('Accuracy')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2308.08778/joint_direct.png",
        "eval": {
            "axes_grids_rating": 4,
            "tick_marks_rating": 4,
            "plot_type_correct": "Yes",
            "text_elements_rating": 3,
            "color_rating": 2,
            "line_styles_rating": 4,
            "numerical_accuracy_rating": 3,
            "figure_adaptability_rating": 4
        }
    },
    {
        "figure_path": "neurips_figures/2308.12580/human_reasons_for_easiness.png",
        "caption": "Reasons that eased the effort to reproduce.",
        "source": "neurips/2308.12580/effortly.tex",
        "arxiv_id": "neurips/2308.12580",
        "llava_output": "The image is a bar chart that presents the reasons that eased the effort to reproduce.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = [0.14, 0.24, 0.43, 0.76]\n\n# Set the figure size and title\nplt.figure(figsize=(8, 6), title=\"Reasons that eased the effort to reproduce\")\n\n# Create the bar chart\nplt.bar(data, color=\"blue\")\n\n# Set the x-axis labels\nplt.xticks(rotation=45)\n\n# Set the y-axis label\nplt.ylabel(\"Reasons\")\n\n# Show the plot\nplt.show()\nimport matplotlib.pyplot as plt\n\n# Define the data for the bar chart\ndata = [0.14, 0.24, 0.43, 0.76]\n\n# Set the figure size and title\nplt.figure(figsize=(8, 6), title=\"Reasons that eased the effort to reproduce\")\n\n# Create the bar chart\nplt.bar(data, color=\"blue\")\n\n# Set the x-axis labels\nplt.xticks(rotation=45)\n\n# Set the y-axis label\nplt.ylabel(\"Reasons\")\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig(\"reasons_reproducibility.png\", dpi=300)\n\n# Show the plot\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2308.12580/human_reasons_for_easiness_direct.png"
    },
    {
        "figure_path": "neurips_figures/2308.12580/human_reasons_for_difficulty.png",
        "caption": "Reasons that made it difficult to reproduce.",
        "source": "neurips/2308.12580/effortly.tex",
        "arxiv_id": "neurips/2308.12580",
        "llava_output": "The image is a bar chart that shows the reasons that made it difficult to reproduce the experiment results.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the data\ndata = [0.13, 0.22, 0.19, 0.66, 0.24, 0.29, 0.34, 0.4, 0.55, 0.6, 0.71, 0.81]\n\n# Set up the plot\nfig, ax = plt.subplots(figsize=(8, 6))\nax.bar(data, color='blue', width=0.15, label='Missing Algorithm')\nax.bar(data, color='green', width=0.15, label='Missing Nuance')\nax.bar(data, color='orange', width=0.15, label='Insufficient Notation')\nax.bar(data, color='red', width=0.15, label='No Major Architecture Details')\nax.bar(data, color='purple', width=0.15, label='Missing Details or Codebase')\nax.bar(data, color='brown', width=0.15, label='Encountered Unclear Notation')\nax.bar(data, color='gray', width=0.15, label='Encountered Missing Algorithm')\n\n# Set up the x-axis labels\nax.set_xticks(data)\nax.set_xticklabels(['Missing Algorithm', 'Missing Nuance', 'Insufficient Notation', 'No Major Architecture Details', 'Missing Details or Codebase', 'Encountered Unclear Notation', 'Encountered Missing Algorithm'])\n\n# Set up the y-axis label\nax.set_ylabel('Number of Reasons')\n\n# Set up the title\nax.set_title('Reasons that made it difficult to reproduce')\n\n# Set up the legend\nax.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('reasons_difficult_reproduce.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2308.12580/human_reasons_for_difficulty_direct.png"
    },
    {
        "figure_path": "neurips_figures/2308.12580/human_reasons_for_limitations.png",
        "caption": "Reasons that served as limitations while evaluating the effort to reproduce.",
        "source": "neurips/2308.12580/effortly.tex",
        "arxiv_id": "neurips/2308.12580",
        "llava_output": "1. Computational resources needed\n2. No mention of imitations\n3. Missing algorithm or hyperparameter\n4. Difficulty in reproducing the results</s>",
        "is_data_visual": "(Yes)",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 101, 10)\ny1 = np.arange(0, 101, 10)\ny2 = np.arange(0, 101, 10)\ny3 = np.arange(0, 101, 10)\n\n# Plot the bars\nplt.bar(x, y1, label='Computational resources needed')\nplt.bar(x, y2, label='No mention about limitations')\nplt.bar(x, y3, label='Missing algorithm or hyperparameter')\n\n# Add labels and title\nplt.xlabel('Reasons')\nplt.ylabel('Percentage')\nplt.title('Reasons that served as limitations while evaluating the effort to reproduce')\n\n# Add legend\nplt.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('reasons_limitation.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2308.12580/human_reasons_for_limitations_direct.png",
        "eval": {
            "axes_grids_rating": 4,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2308.14364/RL_ALGS.png",
        "caption": "Comparison of various RL algorithms.",
        "source": "neurips/2308.14364/main.tex",
        "arxiv_id": "neurips/2308.14364",
        "llava_output": "The image is a line chart showing the performance of various RL algorithms.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Set the figure size and background color\nplt.figure(figsize=(8, 6), facecolor='white')\n\n# Set the x-axis label\nplt.xlabel('Algorithms')\n\n# Set the y-axis label\nplt.ylabel('Percentage Improvement')\n\n# Plot the data points\nplt.plot([0.12, 0.51, 0.88, 0.69], ['DQN', 'A2C', 'TRPO', 'PPO', 'Deep RL Algorithms'], marker='o')\n\n# Add a title to the plot\nplt.title('Comparison of various RL algorithms')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('comparison_of_rl_algorithms.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2308.14364/RL_ALGS_direct.png"
    },
    {
        "figure_path": "neurips_figures/2308.14364/RL_ENHANCE.png",
        "caption": "Comparison of the results of enhancements to PPO.",
        "source": "neurips/2308.14364/main.tex",
        "arxiv_id": "neurips/2308.14364",
        "llava_output": "The image is a bar chart that compares the results of enhancements to PPO.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the data points\ndata_points = [0.1, 0.25, 0.2, 0.35, 0.25, 0.3, 0.35, 0.4, 0.45, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95]\n\n# Define the labels for the x-axis\nlabels = ['No Enhancements', 'Reward Shaping', 'Modified Value Function']\n\n# Define the colors for the bars\ncolors = ['blue', 'blue', 'blue']\n\n# Create the bar plot\nfig, ax = plt.subplots()\nax.bar(labels, data_points, color=colors, width=0.15, label='Comparison of the results of enhancements to PPO')\n\n# Set the x-axis labels\nax.set_xticks(range(len(labels)))\n\n# Set the y-axis label\nax.set_ylabel('Percentage')\n\n# Set the title\nax.set_title('Comparison of the results of enhancements to PPO')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('comparison_results.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2308.14364/RL_ENHANCE_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.06402/FigXHyperparams-01.png",
        "caption": "Example hyperparameter sweeps for ODIN and MLP-NODE",
        "source": "neurips/2309.06402/supp.tex",
        "arxiv_id": "neurips/2309.06402",
        "llava_output": "The image is a combination of a line chart and a scatter plot, showing the performance of two different algorithms, ODIN and MLP-NODE, as a function of the weight decay parameter. The weight decay parameter is a hyperparameter that controls the rate at which the model's weights are pen",
        "is_data_visual": "Answer: Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(0, 10, 1000)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create the figure and subplots\nfig, axs = plt.subplots(3, 1, figsize=(10, 5))\n\n# Set the labels and titles\naxs[0].set_xlabel('x')\naxs[0].set_ylabel('y1')\naxs[0].set_title('y1')\naxs[1].set_xlabel('x')\naxs[1].set_ylabel('y2')\naxs[1].set_title('y2')\naxs[2].set_xlabel('x')\naxs[2].set_ylabel('y3')\naxs[2].set_title('y3')\n\n# Plot the data\naxs[0].plot(x, y1)\naxs[1].plot(x, y2)\naxs[2].plot(x, y3)\n\n# Adjust the spacing between the subplots\nfig.tight_layout()\n\n# Save the plot as a PNG file with 300 dpi\nfig.savefig('plot.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.06402/FigXHyperparams-01_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.06402/InjectivityBarPlot-01.png",
        "caption": "Injectivity of the Flow readout across state dimensionalities. Each bar indicates the mean value of 5 randomly initialized ODIN models for each state dimensionality. Results from individual models are plotted as points.",
        "source": "neurips/2309.06402/supp.tex",
        "arxiv_id": "neurips/2309.06402",
        "llava_output": "0.01</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the state dimensionalities\nstate_dimensions = [3, 5, 8, 10]\n\n# Define the injectivity values\ninjectivity_values = [0.9, 0.85, 0.75, 0.67, 0.58, 0.47, 0.36, 0.25, 0.14, 0.05]\n\n# Create a bar plot for each state dimensionality\nfig, ax = plt.subplots()\nax.bar(state_dimensions, injectivity_values, color='red', width=0.2, label='Injectivity of the Flow readout across state dimensionalities')\n\n# Set the x-axis labels\nax.set_xticks(state_dimensions)\nax.set_xticklabels(state_dimensions)\n\n# Set the y-axis label\nax.set_ylabel('Injectivity')\n\n# Set the title of the plot\nax.set_title('Injectivity of the Flow readout across state dimensionalities')\n\n# Add a legend to the plot\nax.legend()\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('injectivity_plot.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.06402/InjectivityBarPlot-01_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.06402/SupFigXDynAccuracy-Arneodo-Unwarped_Linear-01.png",
        "caption": "Linear-NODE trained on synthetic neural activity from linearly-embedded Arneodo system",
        "source": "neurips/2309.06402/supp.tex",
        "arxiv_id": "neurips/2309.06402",
        "llava_output": "The image is a Line Chart that presents the experiment results.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\ny2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\n# Create the figure\nfig, ax = plt.subplots()\n\n# Plot the two lines\nax.plot(x, y1, label='Linear-NODE trained on synthetic neural activity from linearly-embedded Arneodo system')\nax.plot(x, y2, label='Linear-NODE trained on synthetic neural activity from linearly-embedded Arneodo system')\n\n# Add labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Linear-NODE trained on synthetic neural activity from linearly-embedded Arneodo system')\n\n# Add legend\nax.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.06402/SupFigXDynAccuracy-Arneodo-Unwarped_Linear-01_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 3,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.06402/FigXINN-01.png",
        "caption": "Invertible Neural Network readouts produce qualitatively similar results to Flow readout models. Data shown is the same as Fig. 2C, except overlaid with INN readout model (purple)",
        "source": "neurips/2309.06402/supp.tex",
        "arxiv_id": "neurips/2309.06402",
        "llava_output": "This image is a Line Chart that presents the results of an experiment. The chart shows the readout of an Invertible Neural Network (INN) model, overlaid with the results of the Flow readout model. The data is displayed on a vertical axis, with the x-axis showing the",
        "is_data_visual": "Yes. The image depicts a Line Chart that presents experimental results, specifically the readout of an Invertible Neural Network (INN) model, overlaid with the results of the Flow readout model. The data is displayed on a vertical axis, with the x-axis showing the number of epochs. The chart provides a visualization of the similarity of results between INN readout models and Flow readout models.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = np.array([0, 0.25, 0.5, 0.5, 0.75, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([0, 0.25, 0.5, 0.5, 0.75, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny2 = np.array([0, 0.25, 0.5, 0.5, 0.75, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny3 = np.array([0, 0.25, 0.5, 0.5, 0.75, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Plot the data\nfig, ax = plt.subplots()\nax.plot(x, y1, label='Linear Rate')\nax.plot(x, y2, label='Odin')\nax.plot(x, y3, label='INN')\n\nax.set_xlabel('State')\nax.set_ylabel('Rate')\nax.set_title('Invertible Neural Network readouts produce qualitatively similar results to Flow readout models')\nax.legend()\n\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.06402/FigXINN-01_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 3,
            "plot_type_correct": "Yes",
            "text_elements_rating": 3,
            "color_rating": 2,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.07867/distance_plot.png",
        "caption": "\\small Comparison of the statistical distances between the true and generated data distributions over the course of training. The blue, green, and orange curves are for ``Gauss ELBO,'' ``Beta ELBO,'' and ``Beta KLUB,'' respectively. From the left to right are the plots for Wasserstein-1 distance, Jensen--Shannon divergence, and Hellinger distance, respectively.",
        "source": "neurips/2309.07867/beta_diffusion_v2.tex",
        "arxiv_id": "neurips/2309.07867",
        "llava_output": "The image is a line chart that presents the statistical distances between the true and generated data distributions over the course of training. The chart shows the comparison of the distances for different methods, including Wasserstein-1 distance, Jensen-Shannon divergence, and Hellinger distance. The chart is divided into three sections,",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the x-axis values\nx = np.linspace(0, 10, 100)\n\n# Define the y-axis values for each curve\ny_gauss = np.exp(-0.5 * (x - 5)**2)\ny_beta = np.exp(-0.5 * (x - 5)**2 + np.exp(-0.5 * (x - 5)))\ny_beta_klub = np.exp(-0.5 * (x - 5)**2 + np.exp(-0.5 * (x - 5)) * np.exp(-0.5 * (x - 5)))\n\n# Plot the curves\nplt.plot(x, y_gauss, label='Gauss ELBO')\nplt.plot(x, y_beta, label='Beta ELBO')\nplt.plot(x, y_beta_klub, label='Beta KLUB')\n\n# Add labels and legend\nplt.xlabel('Iteration')\nplt.ylabel('Statistical Distance')\nplt.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('comparison_of_statistical_distances.png', dpi=300, bbox_inches='tight')\n\n# Show the plot\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.07867/distance_plot_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 2,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.11600/hyper_appendix.jpg",
        "caption": "Extended Analysis on Hyperparameter Sensitivity.",
        "source": "neurips/2309.11600/body.tex",
        "arxiv_id": "neurips/2309.11600",
        "llava_output": "4 graphs are shown, each with a different set of data. The graphs are labeled with letters A, B, C, and D.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = np.arange(0, 10, 0.1)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Define the number of steps\nsteps = 20\n\n# Define the plot\nfig, ax = plt.subplots()\n\n# Plot the data\nax.plot(x, y1, label='sin(x)')\nax.plot(x, y2, label='cos(x)')\nax.plot(x, y3, label='tan(x)')\nax.plot(x, y4, label='exp(x)')\nax.plot(x, y5, label='log(x)')\n\n# Add labels and legend\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title('Extended Analysis on Hyperparameter Sensitivity')\nax.legend()\n\n# Save the plot as a png file with 300dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.11600/hyper_appendix_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 1,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 3,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2309.11702/exp_1_movielens_cost_1.png",
        "caption": "Comparison between payment-free vs. payment-efficient incentive designs.",
        "source": "neurips/2309.11702/appendix.tex",
        "arxiv_id": "neurips/2309.11702",
        "llava_output": "The image is a line chart showing the results of an experiment comparing payment-free vs. payment-efficient incentive designs.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 1000000, 100000)\ny1 = np.exp(-0.1*x)\ny2 = np.exp(-0.2*x)\n\n# Plot the data\nplt.plot(x, y1, label='Payment-free')\nplt.plot(x, y2, label='Payment-efficient')\n\n# Add labels and title\nplt.xlabel('Number of users')\nplt.ylabel('Reward')\nplt.title('Comparison between payment-free vs. payment-efficient incentive designs')\n\n# Add legend\nplt.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.11702/exp_1_movielens_cost_1_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.11702/ablation_movie_reward_plot.png",
        "caption": "Ablation study on heuristic search (w.r.t $D^p_\\star \\in [1, 10, 100]$).",
        "source": "neurips/2309.11702/appendix.tex",
        "arxiv_id": "neurips/2309.11702",
        "llava_output": "The image is a line chart showing the results of an ablation study on heuristic search. The chart displays the results for different values of $D^p_\\star, ranging from 1 to 100. The x-axis represents the values of $D^p_\\star, while the",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the x-axis values\nx = np.arange(0, 100001, 10000)\n\n# Define the y-axis values\ny1 = np.arange(0, 100001, 10000)\ny2 = np.arange(0, 100001, 10000)\ny3 = np.arange(0, 100001, 10000)\n\n# Define the colors for the lines\ncolor1 = 'r'\ncolor2 = 'b'\ncolor3 = 'g'\n\n# Plot the lines\nplt.plot(x, y1, color=color1, label='incfedubc w/o PF')\nplt.plot(x, y2, color=color2, label='incfedubc w/ PF')\nplt.plot(x, y3, color=color3, label='incfedubc w/o PF, w/ PF')\n\n# Add labels and legend\nplt.xlabel('Iteration')\nplt.ylabel('Value')\nplt.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('ablation_study.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.11702/ablation_movie_reward_plot_direct.png",
        "eval": {
            "axes_grids_rating": 4,
            "tick_marks_rating": 4,
            "plot_type_correct": "No",
            "text_elements_rating": 2,
            "color_rating": 2,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 2,
            "figure_adaptability_rating": 3
        }
    },
    {
        "figure_path": "neurips_figures/2309.11702/exp_1_syn_cost_1.png",
        "caption": "Comparison between payment-free vs. payment-efficient incentive designs.",
        "source": "neurips/2309.11702/experiments.tex",
        "arxiv_id": "neurips/2309.11702",
        "llava_output": "The image is a line chart that compares two incentive designs.</s>",
        "is_data_visual": "Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the x-axis values\nx = np.arange(0, 1000001, 100000)\n\n# Define the y-axis values\ny1 = np.arange(0, 1000001, 100000)\ny2 = np.arange(0, 1000001, 100000)\n\n# Define the data for the two lines\ndata1 = np.sin(x)\ndata2 = np.cos(x)\n\n# Create the plot\nplt.plot(x, data1, label='Payment-free')\nplt.plot(x, data2, label='Payment-efficient')\n\n# Add labels and title\nplt.xlabel('Iteration')\nplt.ylabel('Cost')\nplt.title('Comparison between payment-free vs. payment-efficient incentive designs')\n\n# Add legend\nplt.legend()\n\n# Save the plot as a png file with 300dpi\nplt.savefig('comparison_plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.11702/exp_1_syn_cost_1_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 2,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.11702/exp_2_regret.png",
        "caption": "Ablation study on heuristic search (w.r.t $D^p_\\star \\in [1, 10, 100]$).",
        "source": "neurips/2309.11702/experiments.tex",
        "arxiv_id": "neurips/2309.11702",
        "llava_output": "The image is a scatter plot showing the relationship between the number of iterations and the regret. The scatter plot is titled \"IncFedUCb\" and is labeled with the number of iterations on the x-axis and the regret on the y-axis. The plot is showing the results of an ablation",
        "is_data_visual": "Yes. The image is a scatter plot showing the results of an ablation study on heuristic search (w.r.t $D^p_\\star \\in [1, 10, 100]$).",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the x and y values\nx = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100]\ny = [0.25, 0.25, 0.35, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95, 1.0]\n\n# Create a line plot\nplt.plot(x, y, color='red')\n\n# Set the title and axis labels\nplt.title('Ablation study on heuristic search (w.r.t $D^p_\\star \\in [1, 10, 100]$)')\nplt.xlabel('$D^p_\\star$')\nplt.ylabel('Iteration')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.11702/exp_2_regret_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.13377/label_imbalance_camelyon_isic.png",
        "caption": "Number of datapoints separated by class for Camelyon-17 and ISIC datasets. There is significant label imbalance for the ISIC dataset.",
        "source": "neurips/2309.13377/main.tex",
        "arxiv_id": "neurips/2309.13377",
        "llava_output": "The image is a bar chart displaying the number of datapoints separated by class for the Camelyon-17 and ISIC datasets. The chart shows that there is significant label imbalance for the ISIC dataset, with fewer datapoints in the majority class compared to the minority",
        "is_data_visual": "Yes.",
        "llava_code": "!pip install matplotlib\n!pip install pandas\n!pip install numpy\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ncamelyon_data = pd.read_csv(\"Camelyon-17.csv\")\nisic_data = pd.read_csv(\"ISIC.csv\")\nclass_counts = camelyon_data.groupby(\"class\").size()\nisic_class_counts = isic_data.groupby(\"class\").size()\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot Camelyon-17\nax.bar(class_counts.index, class_counts.values, color=\"blue\", label=\"Camelyon-17\")\nax.set_xlabel(\"Class\")\nax.set_ylabel(\"Number of Datapoints\")\nax.set_title(\"Number of Datapoints Separated by Class for Camelyon-17\")\nax.legend()\n\n# Plot ISIC\nax.bar(isic_class_counts.index, isic_class_counts.values, color=\"green\", label=\"ISIC\")\nax.set_xlabel(\"Class\")\nax.set_ylabel(\"Number of Datapoints\")\nax.set_title(\"Number of Datapoints Separated by Class for ISIC\")\nax.legend()\n\nplt.savefig(\"camelyon_isic_class_counts.png\", dpi=300)\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.13377/label_imbalance_camelyon_isic_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.13378/app_loss.png",
        "caption": "Training losses and evaluation losses on AIR-BJ. w: with. w/o: without.",
        "source": "neurips/2309.13378/main_crv.tex",
        "arxiv_id": "neurips/2309.13378",
        "llava_output": "The image is a scatter plot that shows the training losses and evaluation losses on AIR-BJ. The plot has two lines, one for training losses and one for evaluation losses, with different colors to distinguish between them. The x-axis represents the iteration number, and the y-axis represents the loss value.",
        "is_data_visual": "Yes, the image represents a data visualization plot.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata_points = [\n    [0.0, 0.3, 0.26, 0.59]\n    [0.25, 0.3, 0.52, 0.6]\n    [0.52, 0.3, 0.77, 0.6]\n    [0.75, 0.3, 1.0, 0.6]\n]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 6))\n\nfor i, point in enumerate(data_points):\n    ax.plot(point[0], point[1], label=f'Training losses and evaluation losses on AIR-BJ. w: with. w/o: without.')\n    ax.legend()\n\nax.set_xlabel('Iteration')\nax.set_ylabel('Loss')\n\nplt.savefig('training_losses_evaluation_losses.png', dpi=300)\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.13378/app_loss_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.13786/rxrx1_balanced_acc_expected_gini_2500_val.png",
        "caption": "Left: Bounds on the expected loss, scaled Gini coefficient, and total objective across different hypotheses. Right: Lorenz curves induced by choosing a hypothesis based on the expected loss bound versus the bound on the total objective. The y-axis shows the cumulative share of the loss that is incurred by the best-off $\\beta$ proportion of the population, where a perfectly fair predictor would produce a distribution along the line $y=x$.",
        "source": "neurips/2309.13786/06_experiment.tex",
        "arxiv_id": "neurips/2309.13786",
        "llava_output": "The image is a combination of a line chart and a scatter plot. The line chart shows the expected loss, scaled Gini coefficient, and total objective across different hypotheses. The scatter plot displays Lorenz curves induced by choosing a hypothesis based on the expected loss bound versus the bound on the total objective. The",
        "is_data_visual": "Yes",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = np.linspace(0, 1, 100)\ny1 = x * 0.5\ny2 = x * 0.75\ny3 = x * 0.9\ny4 = x * 0.95\ny5 = x * 1.0\n\n# Define the colors for the different lines\ncolors = ['green', 'blue', 'red', 'orange', 'purple']\n\n# Plot the Lorenz curves\nplt.plot(x, y1, color=colors[0], label='Expected loss bound')\nplt.plot(x, y2, color=colors[1], label='Expected loss bound (Gini)')\nplt.plot(x, y3, color=colors[2], label='Bound on total objective')\nplt.plot(x, y4, color=colors[3], label='Bound on total objective (Gini)')\nplt.plot(x, y5, color=colors[4], label='Bound on total objective (Gini)')\n\n# Add labels and legend\nplt.xlabel('Cumulative share of the loss')\nplt.ylabel('Cumulative share of the population')\nplt.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('lorenz_curves.png', dpi=300, bbox_inches='tight')\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.13786/rxrx1_balanced_acc_expected_gini_2500_val_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.13786/ml-1m_recall_atkinson_1.0_t_vs_b.png",
        "caption": "We select two hypotheses $h_0$ and $h_1$ with different bounds on Atkinson index produced using 2000 validation samples, and once again visualize the Lorenz curves induced by each. Tighter control on the Atkinson index leads to a more equal distribution of the loss (especially across the middle of the distribution, which aligns with the choice of $\\epsilon$), highlighting the utility of being able to target such a metric in conservative model selection.",
        "source": "neurips/2309.13786/06_experiment.tex",
        "arxiv_id": "neurips/2309.13786",
        "llava_output": "The image is a scatter plot that shows the relationship between the Atkinson index and the loss. The Atkinson index is plotted on the x-axis, while the loss is plotted on the y-axis. The scatter plot also includes two lines, one representing the bound of the Atkinson index",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the Atkinson index bounds\nbounds = [0.0, 0.25, 0.25, 0.5]\n\n# Define the Lorenz curve data\ndata = np.array([0.0, 0.1, 0.25, 0.25, 0.35, 0.5, 0.65, 0.85, 0.99, 1.0])\n\n# Define the x-axis values\nx = np.linspace(0, 1.0, 100)\n\n# Define the y-axis values\ny = np.linspace(0, 0.99, 100)\n\n# Create a grid of x and y values\nxx, yy = np.meshgrid(x, y)\n\n# Calculate the Lorenz curve for each bound\ncurves = []\nfor i in range(len(bounds)):\n    curve = np.zeros_like(xx)\n    for j in range(len(x)):\n        for k in range(len(y)):\n            if bounds[i][0] <= x[j] <= bounds[i][1] and y[k] <= data[j] <= y[k] + data[j] * (x[j] - bounds[i][0]) / (bounds[i][1] - bounds[i][0]):\n                curve[j] += 1\n    curves.append(curve)\n\n# Plot the Lorenz curves\nplt.figure(figsize=(8, 6))\nfor i in range(len(bounds)):\n    plt.plot(xx, curves[i], label=f'Bound {i+1}')\nplt.xlabel('Atkinson Index Bound')\nplt.ylabel('Loss')\nplt.title('Lorenz Curves for Different Atkinson Index Bounds')\nplt.legend()\nplt.savefig('lorenz_curves.png', dpi=300)\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.13786/ml-1m_recall_atkinson_1.0_t_vs_b_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.13786/smooth_delta.png",
        "caption": "Plot of smoothed median function with $\\beta=0.5$ and $a=0.01$",
        "source": "neurips/2309.13786/appendix_exp.tex",
        "arxiv_id": "neurips/2309.13786",
        "llava_output": "The image is a Line Chart that presents the smoothed median function with $\\beta=0.5$ and $a=0.01$.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function\ndef smoothed_median(x, a, beta):\n    y = np.zeros_like(x)\n    y[x < 0] = np.nan\n    y[x >= 0] = np.nan\n    y[x == 0] = a\n    y[x > 0] = (1 - beta) * a + beta * x\n    y[x < 0] = (1 - beta) * x + beta * a\n    return y\n\n# Define the x and y values\nx = np.linspace(0, 10, 1000)\ny = smoothed_median(x, 0.01, 0.5)\n\n# Plot the function\nplt.plot(x, y)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Plot of smoothed median function with beta=0.5 and a=0.01')\nplt.grid(True)\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('smoothed_median_plot.png', dpi=300, bbox_inches='tight')",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.13786/smooth_delta_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.13786/g_female_black_n_100_m_cvar.png",
        "caption": "Learning tighter bounds on functionals of interest for protected groups. On the left, a bound is optimized for CVaR with $\\beta=0.75$, and on the right a bound is optimized for the VaR Interval $[0.5, 0.9]$. In both cases the optimized bounds are tightest on both the target metric as well as the mean, illustrating the power of adaptation both to particular quantile ranges as well as real loss distributions.",
        "source": "neurips/2309.13786/appendix_exp.tex",
        "arxiv_id": "neurips/2309.13786",
        "llava_output": "The image is a scatter plot that shows the relationship between two variables.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = np.linspace(0, 10, 100)\ny1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\ny2 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n# Create the figure\nfig, ax = plt.subplots()\n\n# Plot the two lines\nax.plot(x, y1, label='CVaR')\nax.plot(x, y2, label='VaR Interval')\n\n# Add labels and title\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title('Learning tighter bounds on functionals of interest for protected groups')\n\n# Add legend\nax.legend()\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.13786/g_female_black_n_100_m_cvar_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.13896/holder-space.png",
        "caption": "Comparison of convergence under different $\\phi$ functions (e.g., linear and those in Holder space).",
        "source": "neurips/2309.13896/sec-appendix.tex",
        "arxiv_id": "neurips/2309.13896",
        "llava_output": "The image is a scatter plot that compares the convergence of different $\\phi$ functions.</s>",
        "is_data_visual": "Yes",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function for the x-axis\ndef phi(x):\n    if x < 0:\n        return 1\n    elif x < 1:\n        return np.log(x)\n    else:\n        return 1\n\n# Define the function for the y-axis\ndef f(x):\n    return np.sin(x)\n\n# Define the number of examples\nn_examples = 10\n\n# Define the x-axis values\nx_values = np.linspace(0, 1, n_examples)\n\n# Define the y-axis values\ny_values = [f(x) for x in x_values]\n\n# Create the plot\nplt.plot(x_values, y_values, label='phi = linear')\nplt.plot(x_values, [f(x) for x in x_values], label='phi = Holder')\nplt.xlabel('phi(x)')\nplt.ylabel('f(x)')\nplt.title('Comparison of convergence under different phi functions')\nplt.legend()\nplt.grid()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('comparison_of_convergence.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.13896/holder-space_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 4,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 3
        }
    },
    {
        "figure_path": "neurips_figures/2309.14062/curves.png",
        "caption": "Singular values",
        "source": "neurips/2309.14062/method.tex",
        "arxiv_id": "neurips/2309.14062",
        "llava_output": "1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\nplt.plot(x, y, linewidth=2, label='Old Classes')\nplt.plot(x, y_new, linewidth=2, linestyle='--', label='New Classes')\nplt.xlabel('Value of Singular Value Rank Index')\nplt.ylabel('Value of Singular Value Rank Index')\nplt.title('Singular Value Rank Index')\nplt.legend()\nplt.savefig('singular_value_rank_index.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.14062/curves_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.14502/Siamese_Results_v4.png",
        "caption": "The results on errant beam predictions from SNGP-SNN model. (a) ROC curves with the bands created by smearing the predictions with associated uncertainty values. (b) The scatter plot representing classifier output vs uncertainty values.",
        "source": "neurips/2309.14502/main.tex",
        "arxiv_id": "neurips/2309.14502",
        "llava_output": "1. Scatter Plot: The scatter plot in the image represents classifier output vs uncertainty values, which is a visual representation of the relationship between the two variables.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = np.array([0, 0.25, 0.5, 0.5, 0.75, 1])\ny = np.array([0, 0.25, 0.5, 0.5, 0.75, 1])\n\n# Create the scatter plot\nplt.scatter(x, y, s=50, c='blue', cmap='viridis')\nplt.xlabel('Classifier output')\nplt.ylabel('Uncertainty values')\nplt.title('The scatter plot representing classifier output vs uncertainty values')\nplt.show()\n\n# Create the ROC curves\nfpr, tpr, _ = np.roccurve(x, y, [0, 1])\nplt.plot(fpr, tpr, color='blue', lw=2, label='ROC curve (area = %0.2f)' % np.roccurve(x, y, [0, 1])[2] * 100)\nplt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('The ROC curves with the bands created by smearing the predictions with associated uncertainty values')\nplt.legend(loc=\"lower right\")\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.14502/Siamese_Results_v4_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.14502/FNAL_uq_result.png",
        "caption": "The results from DGPA surrogate model of the FNAL Booster Accelerator. (a) Shows the predictions on the in-distribution and OOD samples along with the associated uncertainty values. The middle region with the high frequency component on the time series represents OOD samples while the initial and tail-end regions represent in-distribution data samples. (b) Shows the predictions and uncertainty values for the synthetic case where the data is intentionally made to enter an OOD region.",
        "source": "neurips/2309.14502/main.tex",
        "arxiv_id": "neurips/2309.14502",
        "llava_output": "The image is a line chart showing the results from DGPA surrogate model of the FNAL Booster Accelerator. The chart displays the predictions on the in-distribution and OOD samples along with the associated uncertainty values. The middle region with the high frequency component on the time series represents O",
        "is_data_visual": "Yes, the image is a data visualization plot.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndata = np.array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                [2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n                [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]])\ndf = pd.DataFrame(data)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14502/FNAL_uq_result_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.14970/walker_hyper_rnn.png",
        "caption": "Cheetah-Dir",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "The image is a line chart showing the results of an experiment. The chart has two lines, one in blue and one in gray, both starting from zero and ending at 7000. The blue line is above the gray line, indicating that the blue model is performing better than the gray model. The",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 10000, 1000)\ny1 = np.arange(0, 10000, 1000)\ny2 = np.arange(0, 10000, 1000)\n\n# Create the plot\nfig, ax1 = plt.subplots()\nax1.plot(x, y1, label='Model RNN')\nax1.plot(x, y2, label='Model RNN+HNN')\n\nax1.set_xlabel('Number of frames')\nax1.set_ylabel('Returns')\nax1.set_title('Cheetah-Dir')\nax1.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('cheetah-dir.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14970/walker_hyper_rnn_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 3,
            "plot_type_correct": "Yes",
            "text_elements_rating": 3,
            "color_rating": 1,
            "line_styles_rating": 4,
            "numerical_accuracy_rating": 2,
            "figure_adaptability_rating": 3
        }
    },
    {
        "figure_path": "neurips_figures/2309.14970/grid.png",
        "caption": "Grid Show",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "The image is a scatter plot, showing the results of an experiment. The plot displays the relationship between two variables, with one variable on the x-axis and the other on the y-axis. The data points are represented by dots, and the plot is color-coded to indicate different groups or categories.",
        "is_data_visual": "Yes.",
        "llava_code": "!pip install matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(0, 3000, 500)\ny = np.arange(0, 3000, 500)\n\nx_labels = np.arange(0, 3000, 500)\ny_labels = np.arange(0, 3000, 500)\n\ndata = np.zeros((len(x), len(y)))\n\nfor i in range(len(x)):\n    for j in range(len(y)):\n        data[i, j] = i * j\nfig, ax = plt.subplots()\n\nax.plot(x, y, color='blue', linewidth=2)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_title('Grid Show')\n\nax.set_xticks(x_labels)\nax.set_yticks(y_labels)\n\nplt.tight_layout()\n\nplt.savefig('grid_show.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.14970/grid_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.14970/walker.png",
        "caption": "Cheetah-Vel",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "This is a line chart showing the results of an experiment. The chart has multiple lines, each representing a different model. The x-axis shows the number of frames, while the y-axis shows the performance of the models. The chart is labeled with the names of the models, including \"Model VIH",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = np.arange(0, 1000001, 10000)\ny = np.sin(x)\n\n# Create the plot\nfig, ax = plt.subplots()\nax.plot(x, y)\n\n# Set the axis labels and title\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('Cheetah-Vel')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('cheetah_vel.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14970/walker_direct.png",
        "eval": {
            "axes_grids_rating": 4,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 2,
            "color_rating": 2,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 2,
            "figure_adaptability_rating": 3
        }
    },
    {
        "figure_path": "neurips_figures/2309.14970/mc-ls-precollect.png",
        "caption": "RNN+HN outperforms VI+HN on MC-LS (MineCraft) environment.",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "The image is a Line Chart that shows the performance of two different models in a Minecraft environment.</s>",
        "is_data_visual": "(Yes)",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14970/mc-ls-precollect_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.14970/grid_rnn.png",
        "caption": "Grid Show",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "1. Line Chart: The image shows a line chart with three different colored lines, each representing a different model. The chart is labeled \"Model\" and displays the results of the experiment.</s>",
        "is_data_visual": "Yes",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the x-axis values\nx = np.arange(0, 100001, 1000)\n\n# Define the y-axis values\ny = np.arange(0, 3000, 500)\n\n# Create a grid of x and y values\nx_grid, y_grid = np.meshgrid(x, y)\n\n# Define the colors for the different lines\ncolors = ['blue', 'red', 'green', 'orange', 'purple', 'gray']\n\n# Plot the different lines\nfor i, color in enumerate(colors):\n    plt.plot(x_grid, y_grid, color=color, linewidth=2)\n\n# Set the axis labels and title\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Grid Show')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('grid_show.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14970/grid_rnn_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.14970/walker_rnn.png",
        "caption": "Cheetah-Vel",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "1. Line Chart</s>",
        "is_data_visual": "Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 100000, 1000)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create the plot\nfig, ax = plt.subplots()\nax.plot(x, y1, label='sin(x)')\nax.plot(x, y2, label='cos(x)')\nax.plot(x, y3, label='tan(x)')\n\n# Set the axis labels and title\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title('Cheetah-Vel')\n\n# Add a legend\nax.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14970/walker_rnn_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 2,
            "color_rating": 3,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2309.14970/analysis_return.png",
        "caption": "Walker Latent Gradient Norm",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "The image is a scatter plot showing the results of an experiment.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14970/analysis_return_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.14970/ti_grid.png",
        "caption": "Walker",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "The image is a scatter plot showing the relationship between two variables. The x-axis represents the first variable, while the y-axis represents the second variable. The plot consists of multiple points, each point representing a data point in the experiment. The data points are color-coded, with different colors representing different groups",
        "is_data_visual": "Yes, the image is a data visualization plot showing the relationship between two variables, representing Walker.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 3000, 500)\ny = np.arange(0, 5000, 500)\ndata = np.sin(x) + np.cos(y)\n\n# Create the plot\nfig, ax = plt.subplots()\nax.plot(x, y, data)\n\n# Set the axis labels and title\nax.set_xlabel(\"Frames (kHz)\")\nax.set_ylabel(\"Frames (kHz)\")\nax.set_title(\"Walker\")\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig(\"walker.png\", dpi=300, bbox_inches=\"tight\")",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.14970/ti_grid_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.14970/ti_traintime.png",
        "caption": "Grid-World LR",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "1. The image is a scatter plot.</s>",
        "is_data_visual": "Answer: Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 1000, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\ny6 = np.log10(x)\n\n# Create the figure\nfig, ax = plt.subplots()\n\n# Plot the lines\nax.plot(x, y1, label='sin(x)')\nax.plot(x, y2, label='cos(x)')\nax.plot(x, y3, label='tan(x)')\nax.plot(x, y4, label='exp(x)')\nax.plot(x, y5, label='log(x)')\nax.plot(x, y6, label='log10(x)')\n\n# Set the axis labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Grid-World LR')\n\n# Add a legend\nax.legend()\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('grid_world_lr.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14970/ti_traintime_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 1,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2309.14970/combined_obj.png",
        "caption": "Tuning Combined Weighting",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "The image is a scatter plot that shows the results of an experiment. The x-axis represents the combined weighting and the y-axis represents the return. The plot shows the relationship between the combined weighting and the return, with each point representing a different combination of weighting. The scatter plot helps to visualize",
        "is_data_visual": "Yes. Based on the justification provided, it appears that the image is a scatter plot showing the relationship between the combined weighting and return of an experiment.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 1000, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create the plot\nfig, ax = plt.subplots()\n\n# Plot the lines\nax.plot(x, y1, label='sin(x)')\nax.plot(x, y2, label='cos(x)')\nax.plot(x, y3, label='tan(x)')\n\n# Set the axis labels and title\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title('Tuning Combined Weighting')\n\n# Add a legend\nax.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('tuning_combined_weighting.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14970/combined_obj_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2309.14970/ml10_10latent_longer_indiv.png",
        "caption": "Our ML10 Results",
        "source": "neurips/2309.14970/neurips_2023.tex",
        "arxiv_id": "neurips/2309.14970",
        "llava_output": "The image is a line chart showing the results of an experiment.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.linspace(0, 100, 1000)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Plot the data\nplt.plot(x, y1, label='sin(x)')\nplt.plot(x, y2, label='cos(x)')\nplt.plot(x, y3, label='tan(x)')\n\n# Add labels and title\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Our ML10 Results')\n\n# Add legend\nplt.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.14970/ml10_10latent_longer_indiv_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 1,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 3,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2309.15286/Dataset_GENESExp1_3000_5iters.jpg",
        "caption": "Local Optimality ($1+\\eps$) against $k$ for GENES and MNIST datasets, and random datasets of the same dimension. Each stream had $10$ point sets of size $3000$, with $k$ ranging from $1$ to $20$.",
        "source": "neurips/2309.15286/main.tex",
        "arxiv_id": "neurips/2309.15286",
        "llava_output": "The image is a scatter plot showing the relationship between local optimality and $k$ for different datasets.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the x and y values for the plot\nx = np.arange(1, 21)\ny1 = [0.25, 0.45, 0.35, 0.56, 0.46, 0.57, 0.67, 0.78, 0.9]\ny2 = [0.25, 0.45, 0.35, 0.56, 0.46, 0.57, 0.67, 0.78, 0.9]\n\n# Create the plot\nplt.plot(x, y1, label='GENES')\nplt.plot(x, y2, label='Random Dataset')\nplt.xlabel('k')\nplt.ylabel('Local Optimality')\nplt.legend()\nplt.title('Local Optimality ($1+\\eps$) against $k$ for GENES and MNIST datasets, and random datasets of the same dimension')\n\n# Save the plot as a png file with 300dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.15286/Dataset_GENESExp1_3000_5iters_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.15286/Dataset_GENES_pointsetsize.jpg",
        "caption": "Local Optimality ($1+\\eps$) against Number of Points in the Base Set for $k = 5,10,15,20$.",
        "source": "neurips/2309.15286/main.tex",
        "arxiv_id": "neurips/2309.15286",
        "llava_output": "The image is a scatter plot showing the local optimality ($1+\\eps$) against the number of points in the base set for $k = 5, 10, 15, 20$. The plot is color-coded, with different colors representing the different values of $k$. The",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points\ndata = np.array([\n    [0.1, 0.1, 0.2, 0.25],\n    [0.2, 0.25, 0.3, 0.35],\n    [0.3, 0.35, 0.4, 0.45],\n    [0.4, 0.45, 0.5, 0.55],\n    [0.5, 0.55, 0.6, 0.65],\n    [0.6, 0.65, 0.7, 0.75],\n    [0.7, 0.75, 0.8, 0.85],\n    [0.9, 0.85, 0.99, 0.95]\n])\n\n# Define the x and y axis labels\nx_label = \"Number of Points in the Base Set\"\ny_label = \"Local Optimality ($1+\\eps$)\"\n\n# Define the x and y axis limits\nx_min = 0\nx_max = 9\ny_min = 0\ny_max = 0.99\n\n# Create the plot\nplt.plot(data[:, 0], data[:, 1], marker='o', linestyle='-', linewidth=2)\nplt.xlabel(x_label)\nplt.ylabel(y_label)\nplt.xlim(x_min, x_max)\nplt.ylim(y_min, y_max)\nplt.title(\"Local Optimality ($1+\\eps$) against Number of Points in the Base Set for $k = 5,10,15,20$\")\nplt.grid(True)\n\n# Save the plot as a png file with 300dpi\nplt.savefig(\"plot.png\", dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.15286/Dataset_GENES_pointsetsize_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.15809/Bar_Syn.png",
        "caption": "Group distributions of the studied datasets.",
        "source": "neurips/2309.15809/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a histogram showing the distribution of the number of groups in the studied datasets.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the colors for the bars\ncolors = ['blue', 'orange', 'green', 'red', 'purple']\n\n# Define the number of groups for each dataset\ngroups = [5, 10, 15, 20, 25]\n\n# Define the heights of the bars for each dataset\nheights = [100, 200, 300, 400, 500]\n\n# Create the bar plot\nfig, ax = plt.subplots()\nax.bar(range(len(groups)), heights, color=colors, label=groups)\n\n# Set the x-axis labels\nax.set_xticks(range(len(groups)))\nax.set_xticklabels(groups)\n\n# Set the y-axis label\nax.set_ylabel('Number of samples')\n\n# Set the title of the plot\nax.set_title('Group distributions of the studied datasets')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('group_distributions.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.15809/Bar_Syn_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 3,
            "plot_type_correct": "Yes",
            "text_elements_rating": 2,
            "color_rating": 2,
            "line_styles_rating": 5,
            "numerical_accuracy_rating": 3,
            "figure_adaptability_rating": 5
        }
    },
    {
        "figure_path": "neurips_figures/2309.15809/disparity_K.png",
        "caption": "Aggregate disparity of 1st projection dimension on synthetic data comprising varying numbers of subgroups ($K$).",
        "source": "neurips/2309.15809/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a line chart that shows the aggregate disparity of the first projection dimension on synthetic data with varying numbers of subgroups (K).</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the number of subgroups (K)\nK = np.array([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n\n# Define the number of subgroups (K) as a list\nK_list = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n\n# Define the x-axis values\nx = np.arange(0, 100, 10)\n\n# Define the y-axis values\ny = np.zeros(len(x))\n\n# Plot the data\nplt.plot(x, y, marker='o', linestyle='-', linewidth=2, color='black')\n\n# Add labels and title\nplt.xlabel('Number of subgroups (K)')\nplt.ylabel('Aggregate disparity of 1st projection dimension')\nplt.title('Aggregate disparity of 1st projection dimension on synthetic data comprising varying numbers of subgroups ($K$)')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.15809/disparity_K_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 2,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.15809/Synthetic_Data1.png",
        "caption": "Visualization of the canonical correlation results on synthetic data for the total five projection dimensions ($r$). All the methods are applied to both the entire dataset and individual subgroups. The closer each subgroup's curve is to the overall curve, the better.",
        "source": "neurips/2309.15809/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a line chart that shows the results of the canonical correlation analysis on synthetic data for the total five projection dimensions. The chart is divided into five sections, each representing a different group, and the lines for each group are labeled accordingly. The chart also includes a legend that indicates the overall correlation results for",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate synthetic data\nnp.random.seed(123)\nn_samples = 1000\nn_subgroups = 5\nn_projection_dimensions = 5\n\n# Generate data for each subgroup\nsubgroup_data = np.random.rand(n_samples, n_projection_dimensions)\n\n# Generate data for the entire dataset\ndata = np.concatenate([subgroup_data for _ in range(n_subgroups)])\n\n# Plot the data\nplt.figure(figsize=(8,6))\nfor i in range(n_subgroups):\n    plt.plot(data[i*n_projection_dimensions:(i+1)*n_projection_dimensions], label=f\"Group {i+1}\")\nplt.xlabel(\"Projection Dimensions\")\nplt.ylabel(\"Correlation Coefficient\")\nplt.legend()\nplt.title(\"Visualization of the canonical correlation results on synthetic data for the total five projection dimensions ($r$)\")\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.15809/Synthetic_Data1_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.15809/NHA_EDU1.png",
        "caption": "Visualization of the canonical correlation results of NHANES (Education \\& Race) for the total five projection dimensions ($r$). All the methods are applied to both the entire dataset and individual subgroups. The closer each subgroup's curve is to the overall curve, the better.",
        "source": "neurips/2309.15809/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a line chart showing the results of the canonical correlation analysis for the NHANES dataset. The chart displays the overall high school results and the results for different subgroups, such as race and education. The closer each subgroup's curve is to the overall curve, the better.</s>",
        "is_data_visual": "Yes, the image is a data visualization plot, specifically a line chart representing the results of the canonical correlation analysis for the NHANES dataset. The chart displays the overall high school results and the results for different subgroups based on education and race, showing how closely each subgroup's curve approaches the overall curve.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.arange(0, 10, 0.1)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Create the plot\nfig, ax = plt.subplots()\nax.plot(x, y1, label='Sin')\nax.plot(x, y2, label='Cos')\nax.plot(x, y3, label='Tan')\nax.plot(x, y4, label='Exp')\nax.plot(x, y5, label='Log')\n\n# Add labels and legend\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Canonical Correlation Results')\nax.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('canonical_correlation_results.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.15809/NHA_EDU1_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 3,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 3
        }
    },
    {
        "figure_path": "neurips_figures/2309.15809/UCLA1.png",
        "caption": "Visualization of the canonical correlation results of MHAAPS (Sex) for the total two projection dimensions ($r$). All the methods are applied to both the entire dataset and individual subgroups. The closer each subgroup's curve is to the overall curve, the better.",
        "source": "neurips/2309.15809/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a line chart that shows the results of the canonical correlation analysis for the MHAAPS dataset. The chart has two lines, one for the overall correlation and one for the male-female correlation. The overall correlation line is red, while the male-female correlation line is orange.",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = [0, 0.25, 0.5, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\ny = [0, 0.25, 0.5, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\n\n# Plot the data\nplt.plot(x, y, 'o-')\n\n# Set the title and axis labels\nplt.title('Visualization of the canonical correlation results of MHAAPS (Sex) for the total two projection dimensions ($r$)')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('canonical_correlation_results.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.15809/UCLA1_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 2,
            "plot_type_correct": "No",
            "text_elements_rating": 2,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2309.15809/lambda_sensitivity_SYNTHE.png",
        "caption": "Sensitivity of correlation and disparity error to $\\lambda$ in SF-CCA framework. Higher $\\lambda$ emphasizes fairness over correlation (accuracy). Moving right to left, accuracy drops as fairness improves (smaller disparity). A notable trend links higher correlation with reduced fairness.",
        "source": "neurips/2309.15809/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a line chart that shows the sensitivity of correlation and disparity error to $\\lambda$ in the SF-CCA framework. The chart illustrates how the accuracy and fairness of the framework change as $\\lambda$ is varied.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data points\nx = np.array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\ny = np.array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Define the line\nline, = plt.plot(x, y, linestyle='--', linewidth=2)\n\n# Add labels and title\nplt.xlabel('$\\lambda$')\nplt.ylabel('Correlation and Disparity Error')\nplt.title('Sensitivity of correlation and disparity error to $\\lambda$ in SF-CCA framework')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('sensitivity_plot.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.15809/lambda_sensitivity_SYNTHE_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 2,
            "plot_type_correct": "No",
            "text_elements_rating": 2,
            "color_rating": 2,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.15809/runtime_fixN.png",
        "caption": "Computation time (mean$\\pm$std) of 10 repeated experiments for the total three projection dimensions on synthetic data comprising four subgroups ($K$). The number of samples is fixed at $N=2000$, while the number of features varies.",
        "source": "neurips/2309.15809/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a line chart that shows the computation time (mean$\\pm$std) of 10 repeated experiments for the total three projection dimensions on synthetic data comprising four subgroups ($K$). The number of samples is fixed at $N=2000$, while the number of features varies",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the data for the plot\ndata = [\n    [0.28, 0.29, 0.34, 0.36],\n    [0.45, 0.38, 0.51, 0.45],\n    [0.59, 0.45, 0.66, 0.52],\n    [0.72, 0.52, 0.79, 0.59]\n]\n\n# Define the number of features for each data point\nfeatures = [200, 400, 600, 800]\n\n# Define the labels for the x-axis\nlabels = [\"200\", \"400\", \"600\", \"800\"]\n\n# Create the plot\nplt.plot(features, data, marker='o', linestyle='-', markersize=8, label=labels)\nplt.xlabel(\"Number of Features (d)\")\nplt.ylabel(\"Computation Time (mean$\\pm$std)\")\nplt.title(\"Computation Time of 10 Repeated Experiments for the Total Three Projection Dimensions on Synthetic Data Comprising Four Subgroups ($K$)\")\nplt.legend()\n\n# Save the plot as a png file with 300dpi\nplt.savefig(\"plot.png\", dpi=300, bbox_inches=\"tight\")\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.15809/runtime_fixN_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 3,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 3
        }
    },
    {
        "figure_path": "neurips_figures/2309.15809/runtime_fixP.png",
        "caption": "Computation time (mean$\\pm$std) of 10 repeated experiments for the total three projection dimensions on synthetic data comprising four subgroups ($K$). The number of features is fixed at $d=100$, and the number of groups is held constant at $K=5$, while the number of samples varies.",
        "source": "neurips/2309.15809/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a line chart that shows the computation time of 10 repeated experiments for the total three projection dimensions on synthetic data comprising four subgroups. The number of features is fixed at 100, and the number of groups is held constant at 5, while the number of samples varies",
        "is_data_visual": "Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = np.array([\n    [0.11, 0.2, 0.2, 0.26],\n    [0.17, 0.25, 0.24, 0.31],\n    [0.23, 0.3, 0.29, 0.36],\n    [0.3, 0.35, 0.36, 0.41],\n    [0.37, 0.4, 0.43, 0.46],\n    [0.44, 0.45, 0.5, 0.51],\n    [0.53, 0.51, 0.59, 0.57],\n    [0.62, 0.57, 0.68, 0.63],\n    [0.72, 0.63, 0.78, 0.69]\n])\n\n# Define the x and y axis labels\nx_label = \"Number of samples\"\ny_label = \"Computation time (mean$\\pm$std)\"\n\n# Define the x and y axis limits\nx_min = 0\nx_max = 1000\ny_min = 0\ny_max = 100\n\n# Define the plot\nfig, ax = plt.subplots()\nax.plot(data[:, 0], data[:, 1], '-o')\nax.set_xlabel(x_label)\nax.set_ylabel(y_label)\nax.set_xlim(x_min, x_max)\nax.set_ylim(y_min, y_max)\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig(\"plot.png\", dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.15809/runtime_fixP_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.15809/runtime_K.png",
        "caption": "Computation time (mean$\\pm$std) of 10 repeated experiments for the total seven projection dimensions on synthetic data comprising varying numbers of subgroups ($K$). The number of features is fixed at $d=100$.",
        "source": "neurips/2309.15809/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a line chart that shows the computation time (mean \u00b1 std) of 10 repeated experiments for the total seven projection dimensions on synthetic data comprising varying numbers of subgroups ($K$). The number of features is fixed at $d=100$.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny = np.array([200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250])\n\n# Create the plot\nplt.plot(x, y)\nplt.xlabel('Number of subgroups $K$')\nplt.ylabel('Computation time (mean$\\pm$std) of 10 repeated experiments for the total seven projection dimensions on synthetic data')\nplt.title('Computation time for varying numbers of subgroups')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('computation_time.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.15809/runtime_K_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.15809/X_CCA.png",
        "caption": "Scatter plot of the synthetic data points after projected to the 2-dimensional space. The distributions of the two groups after projection by CCA are orthogonal to each other. Our SF-CCA and MF-CCA can make the distributions of the two groups close to each other.",
        "source": "neurips/2309.15809/sec_exp.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a scatter plot of the synthetic data points after being projected to the 2-dimensional space.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate synthetic data points\nx = np.random.rand(100)\ny = np.random.rand(100)\n\n# Create scatter plot\nplt.scatter(x, y, s=50, c='blue', cmap='viridis')\n\n# Add labels and caption\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Scatter plot of the synthetic data points after projected to the 2-dimensional space')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('scatter_plot.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.15809/X_CCA_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2309.15809/ADNI_AV1.png",
        "caption": "Visualization of the canonical correlation results of ADNI for the total five projection dimensions ($r$). All the methods are applied to both the entire dataset and individual subgroups. The closer each subgroup's curve is to the overall curve, the better.",
        "source": "neurips/2309.15809/fair_cca/sec_add_b.tex",
        "arxiv_id": "neurips/2309.15809",
        "llava_output": "The image is a line chart that presents the results of the canonical correlation analysis for the total five projection dimensions ($r$) for the entire dataset and individual subgroups.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the data points\nx = [0, 1, 2, 3, 4, 5]\ny = [0.8, 0.6, 0.76, 0.57, 0.54, 0.47, 0.41, 0.36, 0.29, 0.21]\n\n# Create the plot\nplt.plot(x, y, marker='o')\nplt.xlabel('Canonical Correlation Results')\nplt.ylabel('Overall Male and Female')\nplt.title('Visualization of the canonical correlation results of ADNI for the total five projection dimensions ($r$)')\n\n# Save the plot as a png file with 300dpi\nplt.savefig('canonical_correlation_results.png', dpi=300, bbox_inches='tight')",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.15809/ADNI_AV1_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.16115/figures_composition2_indep_param_beta32_base_gflownets_32.png",
        "caption": "Base at \\(\\beta=32\\)",
        "source": "neurips/2309.16115/main.tex",
        "arxiv_id": "neurips/2309.16115",
        "llava_output": "1. Line Chart</s>",
        "is_data_visual": "Yes, this line chart presents experimental results based on the caption indicating a base at \\(\\beta=32\\).",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data points\nx = np.array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99, 1.0])\ny1 = np.array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99, 1.0])\ny2 = np.array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99, 1.0])\n\n# Create the figure\nfig, ax = plt.subplots()\n\n# Plot the two lines\nax.plot(x, y1, label='PSA')\nax.plot(x, y2, label='PSHE')\n\n# Set the axis labels and title\nax.set_xlabel('Base at $\\beta=32$')\nax.set_ylabel('SEH')\nax.set_title('Base at $\\beta=32$')\n\n# Add the legend\nax.legend()\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.16115/figures_composition2_indep_param_beta32_base_gflownets_32_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.16342/scaling.png",
        "caption": "Scaling evaluation on all datasets. The $x$-axis shows the amount of available data, and the $y$-axis shows the position MSE loss values. The model is GNS-10-64 trained for 1M steps (with 40k steps early stopping). Every mark represents a new GNS instance trained with a different amount of data.",
        "source": "neurips/2309.16342/neurips_data_2023.tex",
        "arxiv_id": "neurips/2309.16342",
        "llava_output": "1. The image is a series of Line Charts, each showing the MSE loss values for different amounts of available data.</s>",
        "is_data_visual": "Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the x and y values\nx_values = np.arange(0, 1000000, 100000)\ny_values = np.arange(0, 0.65, 0.1)\n\n# Create the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the lines\nfor i in range(6):\n    line, = ax.plot(x_values, y_values, label=f\"GNS-{i+1}-64\")\n\n# Set the x and y axis labels\nax.set_xlabel(\"Amount of available data\")\nax.set_ylabel(\"MSE loss values\")\n\n# Set the title\nax.set_title(\"Scaling evaluation on all datasets\")\n\n# Add the legend\nax.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig(\"scaling_evaluation.png\", dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.16342/scaling_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.16342/2D_PF_60.png",
        "caption": "Comparison of SPH ($\\circ$) and series solutions ($-$) for Poiseuille flow at $Re=0.0125$.",
        "source": "neurips/2309.16342/neurips_data_2023.tex",
        "arxiv_id": "neurips/2309.16342",
        "llava_output": "1. Line Chart</s>",
        "is_data_visual": "Yes.",
        "llava_code": "!pip install matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.linspace(0, 1, 100)\ny1 = np.linspace(0, 0.5, 100)\ny2 = np.linspace(0, 0.5, 100)\ny3 = np.linspace(0, 0.5, 100)\ncolor1 = 'orange'\ncolor2 = 'green'\ncolor3 = 'blue'\nstyle1 = '-'\nstyle2 = '--'\nstyle3 = '-.'\nplt.plot(x, y1, color=color1, linestyle=style1)\nplt.plot(x, y2, color=color2, linestyle=style2)\nplt.plot(x, y3, color=color3, linestyle=style3)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Comparison of SPH (circ) and series solutions (-) for Poiseuille flow at Re=0.0125')\nplt.savefig('plot.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2309.16342/2D_PF_60_direct.png"
    },
    {
        "figure_path": "neurips_figures/2309.16342/2D_DAM_100.png",
        "caption": "Our results.",
        "source": "neurips/2309.16342/neurips_data_2023.tex",
        "arxiv_id": "neurips/2309.16342",
        "llava_output": "1. Line Chart</s>",
        "is_data_visual": "Yes. Based on the justification and caption, it appears that the image represents a data visualization plot, specifically a Line Chart presenting experimental results.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create the figure\nfig, ax1 = plt.subplots()\nax1.plot(x, y1, label='sin(x)')\nax1.plot(x, y2, label='cos(x)')\nax1.plot(x, y3, label='tan(x)')\n\n# Set the axis labels and title\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.set_title('Our results')\n\n# Add the legend and grid\nax1.legend()\nax1.grid(True)\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2309.16342/2D_DAM_100_direct.png",
        "eval": {
            "axes_grids_rating": 3,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 2,
            "line_styles_rating": 3,
            "numerical_accuracy_rating": 2,
            "figure_adaptability_rating": 2
        }
    },
    {
        "figure_path": "neurips_figures/2310.00675/tars_toy.png",
        "caption": "Toy",
        "source": "neurips/2310.00675/main.tex",
        "arxiv_id": "neurips/2310.00675",
        "llava_output": "The image is a scatter plot, showing the relationship between two variables.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.00675/tars_toy_direct.png"
    },
    {
        "figure_path": "neurips_figures/2310.00675/res_all_KF.png",
        "caption": "",
        "source": "neurips/2310.00675/main.tex",
        "arxiv_id": "neurips/2310.00675",
        "llava_output": "This image is a line chart displaying the results of an experiment. The chart shows the levels of various proteins in the cells, with each protein represented by a different color. The chart has a vertical axis, indicating the levels of the proteins, and a horizontal axis, showing the different proteins being measured.",
        "is_data_visual": "Yes",
        "llava_code": "!pip install matplotlib numpy pandas\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\ndata = pd.read_csv('data.csv')\nplt.scatter(data['X'], data['Y'])\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Scatter Plot')\nplt.show()\nplt.savefig('scatter_plot.png', dpi=300, bbox_inches='tight')",
        "runnable": false,
        "output_figure_path": "llava/neurips/2310.00675/res_all_KF_direct.png"
    },
    {
        "figure_path": "neurips_figures/2310.00741/prompt_source.png",
        "caption": "Prompt Source in FELM",
        "source": "neurips/2310.00741/Data_construction.tex",
        "arxiv_id": "neurips/2310.00741",
        "llava_output": "1. Bar Chart</s>",
        "is_data_visual": "Yes based on the justification and figure caption.",
        "llava_code": "import matplotlib.pyplot as plt\n\n# Define the colors for the sectors\ncolors = ['#90CAF9', '#F7DC6F', '#6FA8DC', '#B3DE6B', '#316395', '#00B050', '#0090C0', '#006060', '#003030']\n\n# Define the labels for the sectors\nlabels = ['MMULHC', 'Online Sources', 'Authors', 'GSMK', 'Quora', 'TruthfulQA', 'Math', 'ChatGPT']\n\n# Define the values for the sectors\nvalues = [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]\n\n# Create a pie chart\nplt.pie(values, labels=labels, colors=colors, autopct='%1.1f%%')\n\n# Set the title and axis labels\nplt.title('Prompt Source in FELM')\nplt.xlabel('Percentage')\nplt.ylabel('Sources')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('prompt_source_in_FELM.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2310.00741/prompt_source_direct.png"
    },
    {
        "figure_path": "neurips_figures/2310.01455/s128b40_metrics.png",
        "caption": "Log-log plot showing the resulting metrics of design points sampled in the Sobol stage (orange dots) and the Bayesian optimisation stage (purple squares) where the darker the colour of a Bayesian point, the later the iteration that design point corresponds to. Stars indicate the non-dominated points--the Pareto optimal design points.",
        "source": "neurips/2310.01455/main.tex",
        "arxiv_id": "neurips/2310.01455",
        "llava_output": "The image is a scatter plot displaying the results of an experiment. The plot shows the resulting metrics of design points sampled in the Sobol stage (orange dots) and the Bayesian optimisation stage (purple squares). The scatter plot is used to represent the relationship between the two variables, in this case",
        "is_data_visual": "Yes. Based on the justification provided, the image is a scatter plot that presents experimental results where the points represent the resulting metrics of design points sampled in the Sobol stage (orange dots) and Bayesian optimisation stage (purple squares). The purpose of the scatter plot is to represent the relationship between the two variables. Additionally, the image has a figure caption that provides more detailed information about the plot and its purpose, making it clear that the image is a data visualization plot.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nX, Y = np.meshgrid(x, y)\n\n# Define the colors for the dots\norange_color = 'orange'\npurple_color = 'purple'\n\n# Plot the orange dots\nplt.scatter(X, Y, c=orange_color, marker='o', s=20, label='Sobol stage')\n\n# Plot the purple squares\nplt.scatter(X, Y, c=purple_color, marker='s', s=20, label='Bayesian optimisation stage')\n\n# Add labels and legend\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.01455/s128b40_metrics_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.01835/labels.png",
        "caption": "Distribution of sample count per labels with respect to the data subset.",
        "source": "neurips/2310.01835/neurips_data_2023.tex",
        "arxiv_id": "neurips/2310.01835",
        "llava_output": "The image is a bar chart showing the distribution of sample count per labels with respect to the data subset.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n\n# Define the labels\nlabels = ['Train', 'Test', 'Unlabeled']\n\n# Create a bar plot\nplt.bar(labels, data, color='blue')\n\n# Set the x-axis labels\nplt.xticks(rotation=45)\n\n# Set the y-axis label\nplt.ylabel('Number of samples')\n\n# Set the title\nplt.title('Distribution of sample count per labels with respect to the data subset')\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')\n\n# Show the plot\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2310.01835/labels_direct.png"
    },
    {
        "figure_path": "neurips_figures/2310.01835/vt_detections.png",
        "caption": "Distribution of VirusTotal detections per label.",
        "source": "neurips/2310.01835/neurips_data_2023.tex",
        "arxiv_id": "neurips/2310.01835",
        "llava_output": "1. Histogram</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = np.array([\n    [0.0, 0.18, 0.11, 0.68],\n    [0.11, 0.22, 0.21, 0.68],\n    [0.21, 0.23, 0.31, 0.68],\n    [0.31, 0.24, 0.41, 0.68],\n    [0.41, 0.25, 0.51, 0.68],\n    [0.51, 0.26, 0.61, 0.68],\n    [0.61, 0.26, 0.71, 0.68],\n    [0.71, 0.26, 0.81, 0.68],\n    [0.81, 0.26, 0.91, 0.68],\n    [0.91, 0.26, 0.99, 0.68]\n])\n\n# Define the labels\nlabels = ['Unlabelled', 'Benign', 'Malicious']\n\n# Define the colors\ncolors = ['blue', 'red', 'green']\n\n# Plot the data\nplt.figure(figsize=(8, 6), dpi=300)\nfor i, label in enumerate(labels):\n    plt.plot(data[:, i], color=colors[i], label=label)\n\nplt.xlabel('VirusTotal detections')\nplt.ylabel('Number of samples')\nplt.title('Distribution of VirusTotal detections per label')\nplt.legend()\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.01835/vt_detections_direct.png"
    },
    {
        "figure_path": "neurips_figures/2310.01835/lab_hom_10.png",
        "caption": "Top 10.",
        "source": "neurips/2310.01835/neurips_data_2023.tex",
        "arxiv_id": "neurips/2310.01835",
        "llava_output": "2 Line Charts.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = np.array([\n    [0.1, 0.2, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8],\n    [0.39, 0.27, 0.5, 0.42, 0.56, 0.72, 0.86, 0.99, 1.0]\n])\n\n# Define the colors\nred_color = 'r'\nblue_color = 'b'\n\n# Create the figure\nfig, ax = plt.subplots()\n\n# Plot the data\nfor i in range(2):\n    for j in range(8):\n        ax.plot([j], data[i, j], color=red_color if j < 4 else blue_color)\n\n# Set the axis limits\nax.set_xlim([0, 8])\nax.set_ylim([0, 1.0])\n\n# Set the axis labels\nax.set_xlabel('Index')\nax.set_ylabel('Percentage')\n\n# Save the plot as a PNG file\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.01835/lab_hom_10_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.01835/rel_test_10.png",
        "caption": "Top 10.",
        "source": "neurips/2310.01835/neurips_data_2023.tex",
        "arxiv_id": "neurips/2310.01835",
        "llava_output": "1. The image is a scatter plot showing the relationship between two variables.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data for the plot\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\ny2 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\n# Create the plot\nfig, ax1 = plt.subplots()\nax1.plot(x, y1, label='Top 10')\nax1.plot(x, y2, label='Empirical CO')\n\n# Add labels and legend\nax1.set_xlabel('Top 10')\nax1.set_ylabel('Score')\nax1.set_title('Top 10')\nax1.legend()\n\n# Save the plot as a png file with 300dpi\nplt.savefig('top_10.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.01835/rel_test_10_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.02230/color_diff_vs_ood_metric_comparison.png",
        "caption": "ColorDSprites",
        "source": "neurips/2310.02230/main.tex",
        "arxiv_id": "neurips/2310.02230",
        "llava_output": "This image is a scatter plot, which is a type of plot used to display the relationship between two variables. The scatter plot shows the relationship between two different variables, with each variable represented by a different color. The plot is divided into three sections, each with its own color scheme. The scatter plot is used to",
        "is_data_visual": "Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 100, 1)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create the figure\nfig, ax = plt.subplots()\n\n# Plot the data\nax.plot(x, y1, label='Sine')\nax.plot(x, y2, label='Cosine')\nax.plot(x, y3, label='Tangent')\n\n# Add labels and title\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('ColorDSprites')\n\n# Add legend\nax.legend()\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig('color_dsprites.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.02230/color_diff_vs_ood_metric_comparison_direct.png",
        "eval": {
            "axes_grids_rating": 2,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.03024/attention_1.png",
        "caption": "Examples of attention maps of the cross-attention layer of the spectrum encoder.",
        "source": "neurips/2310.03024/astroclip-arxiv-iclrstyle.tex",
        "arxiv_id": "neurips/2310.03024",
        "llava_output": "3 Line Charts</s>",
        "is_data_visual": "Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create the figure and subplots\nfig, axs = plt.subplots(3, 1, figsize=(10, 7))\n\n# Set the axis labels and titles\naxs[0].set_xlabel('x')\naxs[0].set_ylabel('y1')\naxs[0].set_title('Head 1')\naxs[1].set_xlabel('x')\naxs[1].set_ylabel('y2')\naxs[1].set_title('Head 2')\naxs[2].set_xlabel('x')\naxs[2].set_ylabel('y3')\naxs[2].set_title('Head 3')\n\n# Plot the data on each subplot\naxs[0].plot(x, y1)\naxs[1].plot(x, y2)\naxs[2].plot(x, y3)\n\n# Adjust the spacing between the subplots\nplt.subplots_adjust(hspace=0.3)\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('attention_map.png', dpi=300, bbox_inches='tight')\n\n# Show the plot\nplt.show()",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.03024/attention_1_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "Yes",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.03024/mask_fill_1.png",
        "caption": "Example of the performance of the mask filling model.",
        "source": "neurips/2310.03024/astroclip-arxiv-iclrstyle.tex",
        "arxiv_id": "neurips/2310.03024",
        "llava_output": "The image is a collection of different graphs and charts, each showing the performance of the mask filling model. The graphs are arranged in a grid-like pattern, with each graph displaying a different aspect of the model's performance. The charts are likely designed to present the results of the experiment in a clear and organized",
        "is_data_visual": "Yes",
        "llava_code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef generate_data():\n    data = np.random.rand(10, 6)\n    data.shape = (10, 6)\n    return data\ndata = generate_data()\ndef plot_data(data):\n    fig, axs = plt.subplots(4, 2, figsize=(10, 10))\n    for i, ax in enumerate(axs.flat):\n        ax.plot(data[:, i], label=f\"Ground Truth {i}\")\n        ax.set_xlabel(\"Time\")\n        ax.set_ylabel(\"Prediction\")\n        ax.set_title(f\"Region {i}\")\n    plt.tight_layout()\n    return fig\nplot_data(data)\nplt.savefig(\"plot.png\", dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2310.03024/mask_fill_1_direct.png"
    },
    {
        "figure_path": "neurips_figures/2310.03024/mask_fill_2.png",
        "caption": "Example of the performance of the mask filling model.",
        "source": "neurips/2310.03024/astroclip-arxiv-iclrstyle.tex",
        "arxiv_id": "neurips/2310.03024",
        "llava_output": "The image is a series of graphs, with each graph showing a different prediction of ground truth regions. The graphs are arranged in a row, with each graph having a different color. The graphs are labeled with the number of regions predicted, and the x-axis shows the number of regions. The y-",
        "is_data_visual": "Yes",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for each panel\ndata = np.array([\n    [0.12, 0.27, 0.24, 0.44],\n    [0.42, 0.41, 0.53, 0.53],\n    [0.67, 0.44, 0.78, 0.55],\n    [0.37, 0.59, 0.49, 0.7]\n])\n\n# Define the labels for each panel\nlabels = np.array([\n    'Ground truth',\n    'Made regions',\n    'Prediction',\n    'Ground truth'\n])\n\n# Define the colors for each panel\ncolors = np.array([\n    'blue',\n    'orange',\n    'orange',\n    'blue'\n])\n\n# Create the figure with 6 panels\nfig, axs = plt.subplots(nrows=2, ncols=3, figsize=(10, 8))\n\n# Loop through each panel and plot the data\nfor i in range(6):\n    axs[i//3, i%3].plot(data[i], label=labels[i], color=colors[i])\n    axs[i//3, i%3].set_xlabel('Time')\n    axs[i//3, i%3].set_ylabel('Value')\n\n# Set the title and legend\nplt.title('Example of the performance of the mask filling model')\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.71), ncol=6)\n\n# Save the plot as a png file with 300dpi\nplt.savefig('mask_filling_model_performance.png', dpi=300)\nplt.show()",
        "runnable": false,
        "output_figure_path": "llava/neurips/2310.03024/mask_fill_2_direct.png"
    },
    {
        "figure_path": "neurips_figures/2310.03024/mask_fill_3.png",
        "caption": "Example of the performance of the mask filling model.",
        "source": "neurips/2310.03024/astroclip-arxiv-iclrstyle.tex",
        "arxiv_id": "neurips/2310.03024",
        "llava_output": "1. Line Chart\n2. Line Chart\n3. Line Chart\n4. Line Chart\n5. Line Chart\n6. Line Chart\n7. Line Chart\n8. Line Chart\n9. Line Chart\n10. Line Chart</s>",
        "is_data_visual": "Yes",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the number of subplots\nnrows = 3\nncols = 4\n\n# Define the data for each subplot\ndata = np.random.rand(nrows * ncols)\n\n# Create the figure and subplots\nfig, axs = plt.subplots(nrows=nrows, ncols=ncols, figsize=(10, 5))\n\n# Loop through each subplot and plot the data\nfor i in range(nrows):\n    for j in range(ncols):\n        axs[i, j].plot(data[i * ncols + j])\n        axs[i, j].set_xlabel(\"X-axis\")\n        axs[i, j].set_ylabel(\"Y-axis\")\n        axs[i, j].set_title(f\"Subplot {i * ncols + j}\")\n\n# Adjust the spacing between subplots\nplt.subplots_adjust(hspace=0.3, wspace=0.3)\n\n# Save the plot as a PNG file with 300 dpi\nplt.savefig(\"mask_filling_model_performance.png\", dpi=300, bbox_inches=\"tight\")",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.03024/mask_fill_3_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.03024/mask_fill_4.png",
        "caption": "Example of the performance of the mask filling model.",
        "source": "neurips/2310.03024/astroclip-arxiv-iclrstyle.tex",
        "arxiv_id": "neurips/2310.03024",
        "llava_output": "This image is a line chart showing the performance of the mask filling model. The chart has multiple lines, each representing a different prediction. The lines are labeled with the prediction names, such as \"ground truth,\" \"prediction,\" and \"region.\" The chart also has a time axis, indicating the time at which",
        "is_data_visual": "Yes. The image represents a line chart showing the performance of a mask filling model. The chart has multiple lines, each representing a different prediction and is labeled with the prediction names. The chart also has a time axis, indicating the time at which the predictions were made.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the number of subplots\nn_subplots = 6\n\n# Define the range of x-axis values\nx_range = np.arange(0, 1000000, 100000)\n\n# Define the y-axis range for each subplot\ny_ranges = [0, 1000000, 2000000, 3000000, 4000000, 5000000]\n\n# Create the subplots\nfig, axs = plt.subplots(n_subplots, 1, figsize=(10, 6))\n\n# Loop through the subplots and plot the data\nfor i in range(n_subplots):\n    y_range = y_ranges[i]\n    axs[i].plot(x_range, np.random.rand(len(x_range)), label='Ground truth')\n    axs[i].axvline(x=500000, color='r', linestyle='--', label='Mistake')\n    axs[i].set_xlabel('Time (s)')\n    axs[i].set_ylabel('Number of regions')\n    axs[i].set_title(f'Subplot {i+1}')\n    axs[i].legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('example_performance_mask_filling_model.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.03024/mask_fill_4_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 2,
            "plot_type_correct": "Yes",
            "text_elements_rating": 2,
            "color_rating": 2,
            "line_styles_rating": 2,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.04655/ablation_supp_vr.png",
        "caption": "ViLT-VR.",
        "source": "neurips/2310.04655/neurips_2023.tex",
        "arxiv_id": "neurips/2310.04655",
        "llava_output": "The image is a line chart that shows the results of an experiment.</s>",
        "is_data_visual": "Yes, based on the justification and figure caption, the image is a line chart representing experimental results of an experiment.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\ndata = np.array([0.0, 0.1, 0.2, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n\n# Define the colors\ncolors = ['blue', 'green', 'orange', 'pink', 'yellow', 'purple', 'red', 'brown']\n\n# Create the plot\nplt.plot(data, color=colors)\n\n# Set the axis labels and title\nplt.xlabel('Percentage')\nplt.ylabel('Value')\nplt.title('ViLT-VR')\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('vilt_vr.png', dpi=300, bbox_inches='tight')",
        "runnable": false,
        "output_figure_path": "llava/neurips/2310.04655/ablation_supp_vr_direct.png"
    },
    {
        "figure_path": "neurips_figures/2310.07123/beta-left_speed.png",
        "caption": "Correlation between the beta power and HF provided by patients from all cinical sessions.",
        "source": "neurips/2310.07123/main.tex",
        "arxiv_id": "neurips/2310.07123",
        "llava_output": "The image is a scatter plot showing the correlation between the beta power and HF provided by patients from all clinical sessions.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the x and y values\nx = np.array([0, 0.25, 0.5, 0.5, 0.75, 0.99])\ny1 = np.array([0, 0.25, 0.5, 0.5, 0.75, 0.99])\ny2 = np.array([0, 0.25, 0.5, 0.5, 0.75, 0.99])\n\n# Create the plot\nplt.plot(x, y1, label='Left Hand')\nplt.plot(x, y2, label='Right Hand')\n\n# Add labels and title\nplt.xlabel('Beta Power')\nplt.ylabel('HF Power')\nplt.title('Correlation between the beta power and HF provided by patients from all cinical sessions')\n\n# Add legend\nplt.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.07123/beta-left_speed_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.07234/Empirical_Analysis_v2.jpg",
        "caption": "Empirical study of prompt-based continual learning under different pre-training paradigms.",
        "source": "neurips/2310.07234/Camera_ready.tex",
        "arxiv_id": "neurips/2310.07234",
        "llava_output": "The image is a Bar Chart showing the results of an experiment.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "!pip install matplotlib numpy pandas\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = pd.read_csv('data.csv')\ndef plot_data(data):\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.barh(data['Task'], height=0.5, color='blue')\n    ax.set_xlabel('Task')\n    ax.set_ylabel('Prediction of Task')\n    ax.set_title('Empirical study of prompt-based continual learning under different pre-training paradigms')\n    ax.set_yticks(np.arange(0, 101, 10))\n    ax.set_yticklabels(np.arange(0, 101, 10))\n    ax.legend(['Spline', 'Linear', 'Polynomial', 'Cosine', 'Sine', 'Arctan'])\n    return fig\nplot_data(data)\nplt.savefig('plot.png', dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2310.07234/Empirical_Analysis_v2_direct.png"
    },
    {
        "figure_path": "neurips_figures/2310.07235/FracZeroChange_SGD5Layer_v2.png",
        "caption": "$L=5$",
        "source": "neurips/2310.07235/appendix.tex",
        "arxiv_id": "neurips/2310.07235",
        "llava_output": "1. The image is a Line Chart.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data for the plot\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\n\n# Create the plot\nfig, ax = plt.subplots()\nax.plot(x, y1, label='sin(x)')\nax.plot(x, y2, label='cos(x)')\nax.plot(x, y3, label='tan(x)')\n\n# Add labels and legend\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.07235/FracZeroChange_SGD5Layer_v2_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.07235/RelativeChangeInParams5Layer.png",
        "caption": "Frac. of sig. params with relative change $>0.05$",
        "source": "neurips/2310.07235/theory.tex",
        "arxiv_id": "neurips/2310.07235",
        "llava_output": "1. Line Chart</s>",
        "is_data_visual": "Yes - based on the justification of a Line Chart and the accompanying figure caption of \"Frac. of sig. params with relative change $>0.05$,\" this image is a data visualization plot presenting experimental results.",
        "llava_code": "import matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the data\nx = np.arange(0, 10, 0.1)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x)\ny5 = np.log(x)\n\n# Create the plot\nfig, ax = plt.subplots()\ncolor = 'tab:red'\n\n# Plot the lines\nax.plot(x, y1, color=color, label='sin(x)')\nax.plot(x, y2, color=color, label='cos(x)')\nax.plot(x, y3, color=color, label='tan(x)')\nax.plot(x, y4, color=color, label='exp(x)')\nax.plot(x, y5, color=color, label='log(x)')\n\n# Add labels and legend\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_title('Frac. of sig. params with relative change $>0.05$')\nax.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300, bbox_inches='tight')",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.07235/RelativeChangeInParams5Layer_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.07235/RelativechangeInParams.png",
        "caption": "Frac. of sig. params with relative change $>0.5$",
        "source": "neurips/2310.07235/theory.tex",
        "arxiv_id": "neurips/2310.07235",
        "llava_output": "The image is a Line Chart, showing the relative change of sig. params with relative change $>0.5$.</s>",
        "is_data_visual": "Yes.",
        "llava_code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the data\nx = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ny1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\ny2 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1])\n\n# Plot the data\nplt.plot(x, y1, label='y1')\nplt.plot(x, y2, label='y2')\n\n# Add labels and legend\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\n\n# Save the plot as a PNG file with 300dpi\nplt.savefig('plot.png', dpi=300)",
        "runnable": true,
        "output_figure_path": "llava/neurips/2310.07235/RelativechangeInParams_direct.png",
        "eval": {
            "axes_grids_rating": 1,
            "tick_marks_rating": 1,
            "plot_type_correct": "No",
            "text_elements_rating": 1,
            "color_rating": 1,
            "line_styles_rating": 1,
            "numerical_accuracy_rating": 1,
            "figure_adaptability_rating": 1
        }
    },
    {
        "figure_path": "neurips_figures/2310.07235/RelGradNormsByLayerAllInits.png",
        "caption": "Relative gradient norms of feature (left axis, solid) and of attention (right axis, stylized) parameters for $l\\in[1,5,10]$ and $L=10$, sampled every $25$ epochs. Test accuracy is at the top. Both attention and feature gradients at the first, middle, and last layer of the network with both balanced initializations are much larger than with unbalanced initialization (note axis scales).",
        "source": "neurips/2310.07235/theory.tex",
        "arxiv_id": "neurips/2310.07235",
        "llava_output": "The image is a line chart that shows the relative gradient norms of feature and attention parameters for different values of $l$ and $L$. The chart is divided into three sections, each representing a different layer of the network. The chart is labeled with the corresponding values of $l$ and $L$",
        "is_data_visual": "Yes. The image is a line chart that presents the relationship of gradient norms between feature and attention parameters for different values of $l$ and $L$, with corresponding axis labels and figure caption.",
        "llava_code": "!pip install matplotlib\n!pip install numpy\n!pip install pandas\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndef generate_plot(l_values, L_value, epochs, test_accuracy):\n    fig, ax = plt.subplots()\n    x = np.arange(len(l_values))\n    y1 = np.array(l_values)\n    y2 = np.array(test_accuracy)\n\n    ax.plot(x, y1, label=\"Relative gradient norms of feature parameters\")\n    ax.plot(x, y2, label=\"Test accuracy\")\n    ax.set_xlabel(\"Epoch\")\n    ax.set_ylabel(\"Relative gradient norms of feature parameters\")\n    ax.set_title(\"Relative gradient norms of feature (left axis, solid) and of attention (right axis, stylized) parameters for $l\\in[1,5,10]$ and $L=10$, sampled every $25$ epochs\")\n    ax.legend()\n    ax.grid(True)\n\n    return fig\nl_values = [1, 5, 10]\nL_value = 10\nepochs = [25] * len(l_values)\ntest_accuracy = [0.7, 0.7, 0.8] * len(l_values)\nfig = generate_plot(l_values, L_value, epochs, test_accuracy)\nfig.savefig(\"plot.png\", dpi=300)",
        "runnable": false,
        "output_figure_path": "llava/neurips/2310.07235/RelGradNormsByLayerAllInits_direct.png"
    }
]